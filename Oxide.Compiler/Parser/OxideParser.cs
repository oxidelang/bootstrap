//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/chand/Projects/Oxide/bootstrap/Oxide.Compiler\Oxide.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Oxide.Compiler.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class OxideParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, COMMENT=2, LINE_COMMENT=3, PACKAGE=4, IMPORT=5, PUB=6, MUT=7, STRUCT=8, 
		IMPL=9, WHERE=10, FOR=11, LET=12, FN=13, UNSAFE=14, REF=15, WEAK=16, DERIVED=17, 
		SELF_FIELD=18, RETURN=19, IF=20, ELSE=21, LBRACK=22, RBRACK=23, LARROW=24, 
		RARROW=25, LBRACE=26, RBRACE=27, COLON=28, DCOLON=29, SEMI=30, ARROW=31, 
		AMP=32, PERIOD=33, COMMA=34, PLUS=35, MINUS=36, EQUAL=37, NOTEQ=38, EQUALTO=39, 
		STAR=40, DIV=41, MOD=42, NOT=43, AS=44, OR_OP=45, AND_OP=46, INC_OR_OP=47, 
		EX_OR_OP=48, LEQ_OP=49, GEQ_OP=50, IDENTIFIER=51, INT_NUMBER=52, HEX_NUMBER=53, 
		BINARY_NUMBER=54, CHAR_LITERAL=55, STRING_LITERAL=56, TRUE=57, FALSE=58;
	public const int
		RULE_compilation_unit = 0, RULE_package = 1, RULE_qualified_name = 2, 
		RULE_qualified_name_part = 3, RULE_top_level = 4, RULE_import_stmt = 5, 
		RULE_struct_def = 6, RULE_generic_def = 7, RULE_field_def = 8, RULE_impl_stmt = 9, 
		RULE_impl_body = 10, RULE_where = 11, RULE_where_clause = 12, RULE_fn_def = 13, 
		RULE_parameter = 14, RULE_fn_body = 15, RULE_block = 16, RULE_statements = 17, 
		RULE_statement = 18, RULE_expression = 19, RULE_or_expression = 20, RULE_and_expression = 21, 
		RULE_inc_or_expression = 22, RULE_ex_or_expression = 23, RULE_bit_and_expression = 24, 
		RULE_equal_expression = 25, RULE_comparison_expression = 26, RULE_cast_expression = 27, 
		RULE_shift_expression = 28, RULE_add_expression = 29, RULE_multiply_expression = 30, 
		RULE_unary_expression = 31, RULE_base_expression = 32, RULE_block_expression = 33, 
		RULE_if_expression = 34, RULE_arguments = 35, RULE_argument = 36, RULE_label = 37, 
		RULE_struct_initialiser = 38, RULE_field_initialiser = 39, RULE_variable_statement = 40, 
		RULE_name = 41, RULE_type = 42, RULE_type_generic_params = 43, RULE_type_flags = 44, 
		RULE_visibility = 45, RULE_literal = 46, RULE_boolean_literal = 47, RULE_left_shift = 48, 
		RULE_right_shift = 49;
	public static readonly string[] ruleNames = {
		"compilation_unit", "package", "qualified_name", "qualified_name_part", 
		"top_level", "import_stmt", "struct_def", "generic_def", "field_def", 
		"impl_stmt", "impl_body", "where", "where_clause", "fn_def", "parameter", 
		"fn_body", "block", "statements", "statement", "expression", "or_expression", 
		"and_expression", "inc_or_expression", "ex_or_expression", "bit_and_expression", 
		"equal_expression", "comparison_expression", "cast_expression", "shift_expression", 
		"add_expression", "multiply_expression", "unary_expression", "base_expression", 
		"block_expression", "if_expression", "arguments", "argument", "label", 
		"struct_initialiser", "field_initialiser", "variable_statement", "name", 
		"type", "type_generic_params", "type_flags", "visibility", "literal", 
		"boolean_literal", "left_shift", "right_shift"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'package'", "'import'", "'pub'", "'mut'", "'struct'", 
		"'impl'", "'where'", "'for'", "'let'", "'fn'", "'unsafe'", "'ref'", "'weak'", 
		"'~'", "'self'", "'return'", "'if'", "'else'", "'('", "')'", "'<'", "'>'", 
		"'{'", "'}'", "':'", "'::'", "';'", "'->'", "'&'", "'.'", "','", "'+'", 
		"'-'", "'='", "'!='", "'=='", "'*'", "'/'", "'%'", "'!'", "'as'", "'||'", 
		"'&&'", "'|'", "'^'", "'<='", "'>='", null, null, null, null, null, null, 
		"'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "COMMENT", "LINE_COMMENT", "PACKAGE", "IMPORT", "PUB", "MUT", 
		"STRUCT", "IMPL", "WHERE", "FOR", "LET", "FN", "UNSAFE", "REF", "WEAK", 
		"DERIVED", "SELF_FIELD", "RETURN", "IF", "ELSE", "LBRACK", "RBRACK", "LARROW", 
		"RARROW", "LBRACE", "RBRACE", "COLON", "DCOLON", "SEMI", "ARROW", "AMP", 
		"PERIOD", "COMMA", "PLUS", "MINUS", "EQUAL", "NOTEQ", "EQUALTO", "STAR", 
		"DIV", "MOD", "NOT", "AS", "OR_OP", "AND_OP", "INC_OR_OP", "EX_OR_OP", 
		"LEQ_OP", "GEQ_OP", "IDENTIFIER", "INT_NUMBER", "HEX_NUMBER", "BINARY_NUMBER", 
		"CHAR_LITERAL", "STRING_LITERAL", "TRUE", "FALSE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Oxide.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static OxideParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public OxideParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public OxideParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PackageContext package() {
			return GetRuleContext<PackageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(OxideParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Import_stmtContext[] import_stmt() {
			return GetRuleContexts<Import_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_stmtContext import_stmt(int i) {
			return GetRuleContext<Import_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_levelContext[] top_level() {
			return GetRuleContexts<Top_levelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_levelContext top_level(int i) {
			return GetRuleContext<Top_levelContext>(i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			package();
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 101;
				import_stmt();
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUB) | (1L << STRUCT) | (1L << IMPL) | (1L << FN))) != 0)) {
				{
				{
				State = 107;
				top_level();
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 113;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(OxideParser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(OxideParser.SEMI, 0); }
		public PackageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package; } }
	}

	[RuleVersion(0)]
	public PackageContext package() {
		PackageContext _localctx = new PackageContext(Context, State);
		EnterRule(_localctx, 2, RULE_package);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(PACKAGE);
			State = 116;
			qualified_name();
			State = 117;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_nameContext : ParserRuleContext {
		public Qualified_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_name; } }
	 
		public Qualified_nameContext() { }
		public virtual void CopyFrom(Qualified_nameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Relative_qualified_nameContext : Qualified_nameContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_name_partContext qualified_name_part() {
			return GetRuleContext<Qualified_name_partContext>(0);
		}
		public Relative_qualified_nameContext(Qualified_nameContext context) { CopyFrom(context); }
	}
	public partial class Absolute_qualified_nameContext : Qualified_nameContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCOLON() { return GetToken(OxideParser.DCOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_name_partContext qualified_name_part() {
			return GetRuleContext<Qualified_name_partContext>(0);
		}
		public Absolute_qualified_nameContext(Qualified_nameContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Qualified_nameContext qualified_name() {
		Qualified_nameContext _localctx = new Qualified_nameContext(Context, State);
		EnterRule(_localctx, 4, RULE_qualified_name);
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				_localctx = new Relative_qualified_nameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 119;
				qualified_name_part(0);
				}
				break;
			case DCOLON:
				_localctx = new Absolute_qualified_nameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 120;
				Match(DCOLON);
				State = 121;
				qualified_name_part(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_name_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(OxideParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_name_partContext qualified_name_part() {
			return GetRuleContext<Qualified_name_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCOLON() { return GetToken(OxideParser.DCOLON, 0); }
		public Qualified_name_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_name_part; } }
	}

	[RuleVersion(0)]
	public Qualified_name_partContext qualified_name_part() {
		return qualified_name_part(0);
	}

	private Qualified_name_partContext qualified_name_part(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Qualified_name_partContext _localctx = new Qualified_name_partContext(Context, _parentState);
		Qualified_name_partContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_qualified_name_part, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 125;
			Match(IDENTIFIER);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 132;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Qualified_name_partContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_qualified_name_part);
					State = 127;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 128;
					Match(DCOLON);
					State = 129;
					Match(IDENTIFIER);
					}
					} 
				}
				State = 134;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Top_levelContext : ParserRuleContext {
		public Top_levelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level; } }
	 
		public Top_levelContext() { }
		public virtual void CopyFrom(Top_levelContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Impl_top_levelContext : Top_levelContext {
		[System.Diagnostics.DebuggerNonUserCode] public Impl_stmtContext impl_stmt() {
			return GetRuleContext<Impl_stmtContext>(0);
		}
		public Impl_top_levelContext(Top_levelContext context) { CopyFrom(context); }
	}
	public partial class Fn_top_levelContext : Top_levelContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fn_defContext fn_def() {
			return GetRuleContext<Fn_defContext>(0);
		}
		public Fn_top_levelContext(Top_levelContext context) { CopyFrom(context); }
	}
	public partial class Struct_top_levelContext : Top_levelContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_defContext struct_def() {
			return GetRuleContext<Struct_defContext>(0);
		}
		public Struct_top_levelContext(Top_levelContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Top_levelContext top_level() {
		Top_levelContext _localctx = new Top_levelContext(Context, State);
		EnterRule(_localctx, 8, RULE_top_level);
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new Struct_top_levelContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 135;
				struct_def();
				}
				break;
			case 2:
				_localctx = new Impl_top_levelContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 136;
				impl_stmt();
				}
				break;
			case 3:
				_localctx = new Fn_top_levelContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 137;
				fn_def();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(OxideParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(OxideParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(OxideParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Import_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_stmt; } }
	}

	[RuleVersion(0)]
	public Import_stmtContext import_stmt() {
		Import_stmtContext _localctx = new Import_stmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_import_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(IMPORT);
			State = 141;
			qualified_name();
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 142;
				Match(AS);
				State = 143;
				name();
				}
			}

			State = 146;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(OxideParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(OxideParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(OxideParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_defContext generic_def() {
			return GetRuleContext<Generic_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_defContext[] field_def() {
			return GetRuleContexts<Field_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_defContext field_def(int i) {
			return GetRuleContext<Field_defContext>(i);
		}
		public Struct_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_def; } }
	}

	[RuleVersion(0)]
	public Struct_defContext struct_def() {
		Struct_defContext _localctx = new Struct_defContext(Context, State);
		EnterRule(_localctx, 12, RULE_struct_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUB) {
				{
				State = 148;
				visibility();
				}
			}

			State = 151;
			Match(STRUCT);
			State = 152;
			name();
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LARROW) {
				{
				State = 153;
				generic_def();
				}
			}

			State = 156;
			Match(LBRACE);
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PUB || _la==IDENTIFIER) {
				{
				{
				State = 157;
				field_def();
				}
				}
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 163;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARROW() { return GetToken(OxideParser.LARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(OxideParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(OxideParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(OxideParser.COMMA, i);
		}
		public Generic_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_def; } }
	}

	[RuleVersion(0)]
	public Generic_defContext generic_def() {
		Generic_defContext _localctx = new Generic_defContext(Context, State);
		EnterRule(_localctx, 14, RULE_generic_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(LARROW);
			State = 166;
			name();
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 167;
				Match(COMMA);
				State = 168;
				name();
				}
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 174;
			Match(RARROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(OxideParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(OxideParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public Field_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_def; } }
	}

	[RuleVersion(0)]
	public Field_defContext field_def() {
		Field_defContext _localctx = new Field_defContext(Context, State);
		EnterRule(_localctx, 16, RULE_field_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUB) {
				{
				State = 176;
				visibility();
				}
			}

			State = 179;
			name();
			State = 180;
			Match(COLON);
			State = 181;
			type();
			State = 182;
			Match(COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Impl_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPL() { return GetToken(OxideParser.IMPL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(OxideParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Impl_bodyContext impl_body() {
			return GetRuleContext<Impl_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(OxideParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public Impl_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_impl_stmt; } }
	}

	[RuleVersion(0)]
	public Impl_stmtContext impl_stmt() {
		Impl_stmtContext _localctx = new Impl_stmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_impl_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(IMPL);
			State = 188;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 185;
				qualified_name();
				State = 186;
				Match(FOR);
				}
				break;
			}
			State = 190;
			type();
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 191;
				where();
				}
			}

			State = 196;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
				{
				State = 194;
				Match(SEMI);
				}
				break;
			case LBRACE:
				{
				State = 195;
				impl_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Impl_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(OxideParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(OxideParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Fn_defContext[] fn_def() {
			return GetRuleContexts<Fn_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fn_defContext fn_def(int i) {
			return GetRuleContext<Fn_defContext>(i);
		}
		public Impl_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_impl_body; } }
	}

	[RuleVersion(0)]
	public Impl_bodyContext impl_body() {
		Impl_bodyContext _localctx = new Impl_bodyContext(Context, State);
		EnterRule(_localctx, 20, RULE_impl_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(LBRACE);
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PUB || _la==FN) {
				{
				{
				State = 199;
				fn_def();
				}
				}
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 205;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(OxideParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext[] where_clause() {
			return GetRuleContexts<Where_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause(int i) {
			return GetRuleContext<Where_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(OxideParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(OxideParser.COMMA, i);
		}
		public WhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where; } }
	}

	[RuleVersion(0)]
	public WhereContext where() {
		WhereContext _localctx = new WhereContext(Context, State);
		EnterRule(_localctx, 22, RULE_where);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(WHERE);
			State = 208;
			where_clause();
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 209;
				Match(COMMA);
				State = 210;
				where_clause();
				}
				}
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(OxideParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(OxideParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(OxideParser.PLUS, i);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 24, RULE_where_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			name();
			State = 217;
			Match(COLON);
			State = 218;
			type();
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS) {
				{
				{
				State = 219;
				Match(PLUS);
				State = 220;
				type();
				}
				}
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FN() { return GetToken(OxideParser.FN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(OxideParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(OxideParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Fn_bodyContext fn_body() {
			return GetRuleContext<Fn_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(OxideParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(OxideParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(OxideParser.COMMA, i);
		}
		public Fn_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_def; } }
	}

	[RuleVersion(0)]
	public Fn_defContext fn_def() {
		Fn_defContext _localctx = new Fn_defContext(Context, State);
		EnterRule(_localctx, 26, RULE_fn_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUB) {
				{
				State = 226;
				visibility();
				}
			}

			State = 229;
			Match(FN);
			State = 230;
			name();
			State = 231;
			Match(LBRACK);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUT) | (1L << REF) | (1L << WEAK) | (1L << DERIVED) | (1L << SELF_FIELD) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 232;
				parameter();
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 233;
					Match(COMMA);
					State = 234;
					parameter();
					}
					}
					State = 239;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 242;
			Match(RBRACK);
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARROW) {
				{
				State = 243;
				Match(ARROW);
				State = 244;
				type();
				}
			}

			State = 247;
			fn_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(OxideParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_flagsContext type_flags() {
			return GetRuleContext<Type_flagsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF_FIELD() { return GetToken(OxideParser.SELF_FIELD, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 28, RULE_parameter);
		try {
			State = 256;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 249;
				name();
				State = 250;
				Match(COLON);
				State = 251;
				type();
				}
				break;
			case MUT:
			case REF:
			case WEAK:
			case DERIVED:
			case SELF_FIELD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 253;
				type_flags();
				State = 254;
				Match(SELF_FIELD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fn_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(OxideParser.SEMI, 0); }
		public Fn_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fn_body; } }
	}

	[RuleVersion(0)]
	public Fn_bodyContext fn_body() {
		Fn_bodyContext _localctx = new Fn_bodyContext(Context, State);
		EnterRule(_localctx, 30, RULE_fn_body);
		try {
			State = 260;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 258;
				block();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(OxideParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(OxideParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 32, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(LBRACE);
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LET) | (1L << UNSAFE) | (1L << DERIVED) | (1L << SELF_FIELD) | (1L << RETURN) | (1L << IF) | (1L << LBRACK) | (1L << LBRACE) | (1L << DCOLON) | (1L << SEMI) | (1L << AMP) | (1L << MINUS) | (1L << NOT) | (1L << IDENTIFIER) | (1L << INT_NUMBER) | (1L << HEX_NUMBER) | (1L << BINARY_NUMBER) | (1L << STRING_LITERAL) | (1L << TRUE) | (1L << FALSE))) != 0)) {
				{
				State = 263;
				statements();
				}
			}

			State = 266;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 34, RULE_statements);
		int _la;
		try {
			int _alt;
			State = 277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 269;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 268;
						statement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 271;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UNSAFE) | (1L << DERIVED) | (1L << SELF_FIELD) | (1L << RETURN) | (1L << IF) | (1L << LBRACK) | (1L << LBRACE) | (1L << DCOLON) | (1L << AMP) | (1L << MINUS) | (1L << NOT) | (1L << IDENTIFIER) | (1L << INT_NUMBER) | (1L << HEX_NUMBER) | (1L << BINARY_NUMBER) | (1L << STRING_LITERAL) | (1L << TRUE) | (1L << FALSE))) != 0)) {
					{
					State = 273;
					expression();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 276;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(OxideParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_expressionContext block_expression() {
			return GetRuleContext<Block_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_statementContext variable_statement() {
			return GetRuleContext<Variable_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_statement);
		try {
			State = 285;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 279;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 280;
				expression();
				State = 281;
				Match(SEMI);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 283;
				block_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 284;
				variable_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Or_expressionContext or_expression() {
			return GetRuleContext<Or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(OxideParser.RETURN, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_expression);
		try {
			State = 290;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNSAFE:
			case DERIVED:
			case SELF_FIELD:
			case IF:
			case LBRACK:
			case LBRACE:
			case DCOLON:
			case AMP:
			case MINUS:
			case NOT:
			case IDENTIFIER:
			case INT_NUMBER:
			case HEX_NUMBER:
			case BINARY_NUMBER:
			case STRING_LITERAL:
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 287;
				or_expression(0);
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 288;
				Match(RETURN);
				State = 289;
				or_expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public And_expressionContext and_expression() {
			return GetRuleContext<And_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Or_expressionContext or_expression() {
			return GetRuleContext<Or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_OP() { return GetToken(OxideParser.OR_OP, 0); }
		public Or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_expression; } }
	}

	[RuleVersion(0)]
	public Or_expressionContext or_expression() {
		return or_expression(0);
	}

	private Or_expressionContext or_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Or_expressionContext _localctx = new Or_expressionContext(Context, _parentState);
		Or_expressionContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_or_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 293;
			and_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 300;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Or_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_or_expression);
					State = 295;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 296;
					Match(OR_OP);
					State = 297;
					and_expression(0);
					}
					} 
				}
				State = 302;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class And_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Inc_or_expressionContext inc_or_expression() {
			return GetRuleContext<Inc_or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public And_expressionContext and_expression() {
			return GetRuleContext<And_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_OP() { return GetToken(OxideParser.AND_OP, 0); }
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expression; } }
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		return and_expression(0);
	}

	private And_expressionContext and_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		And_expressionContext _localctx = new And_expressionContext(Context, _parentState);
		And_expressionContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_and_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 304;
			inc_or_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 311;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new And_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_and_expression);
					State = 306;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 307;
					Match(AND_OP);
					State = 308;
					inc_or_expression(0);
					}
					} 
				}
				State = 313;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Inc_or_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ex_or_expressionContext ex_or_expression() {
			return GetRuleContext<Ex_or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inc_or_expressionContext inc_or_expression() {
			return GetRuleContext<Inc_or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC_OR_OP() { return GetToken(OxideParser.INC_OR_OP, 0); }
		public Inc_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inc_or_expression; } }
	}

	[RuleVersion(0)]
	public Inc_or_expressionContext inc_or_expression() {
		return inc_or_expression(0);
	}

	private Inc_or_expressionContext inc_or_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Inc_or_expressionContext _localctx = new Inc_or_expressionContext(Context, _parentState);
		Inc_or_expressionContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_inc_or_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 315;
			ex_or_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 322;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Inc_or_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_inc_or_expression);
					State = 317;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 318;
					Match(INC_OR_OP);
					State = 319;
					ex_or_expression(0);
					}
					} 
				}
				State = 324;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Ex_or_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bit_and_expressionContext bit_and_expression() {
			return GetRuleContext<Bit_and_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ex_or_expressionContext ex_or_expression() {
			return GetRuleContext<Ex_or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EX_OR_OP() { return GetToken(OxideParser.EX_OR_OP, 0); }
		public Ex_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ex_or_expression; } }
	}

	[RuleVersion(0)]
	public Ex_or_expressionContext ex_or_expression() {
		return ex_or_expression(0);
	}

	private Ex_or_expressionContext ex_or_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Ex_or_expressionContext _localctx = new Ex_or_expressionContext(Context, _parentState);
		Ex_or_expressionContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_ex_or_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 326;
			bit_and_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 333;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Ex_or_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_ex_or_expression);
					State = 328;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 329;
					Match(EX_OR_OP);
					State = 330;
					bit_and_expression(0);
					}
					} 
				}
				State = 335;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Bit_and_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Equal_expressionContext equal_expression() {
			return GetRuleContext<Equal_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bit_and_expressionContext bit_and_expression() {
			return GetRuleContext<Bit_and_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(OxideParser.AMP, 0); }
		public Bit_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_and_expression; } }
	}

	[RuleVersion(0)]
	public Bit_and_expressionContext bit_and_expression() {
		return bit_and_expression(0);
	}

	private Bit_and_expressionContext bit_and_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bit_and_expressionContext _localctx = new Bit_and_expressionContext(Context, _parentState);
		Bit_and_expressionContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_bit_and_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 337;
			equal_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 344;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Bit_and_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_bit_and_expression);
					State = 339;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 340;
					Match(AMP);
					State = 341;
					equal_expression(0);
					}
					} 
				}
				State = 346;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Equal_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equal_expressionContext equal_expression() {
			return GetRuleContext<Equal_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALTO() { return GetToken(OxideParser.EQUALTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQ() { return GetToken(OxideParser.NOTEQ, 0); }
		public Equal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equal_expression; } }
	}

	[RuleVersion(0)]
	public Equal_expressionContext equal_expression() {
		return equal_expression(0);
	}

	private Equal_expressionContext equal_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Equal_expressionContext _localctx = new Equal_expressionContext(Context, _parentState);
		Equal_expressionContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_equal_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 348;
			comparison_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 358;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 356;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
					case 1:
						{
						_localctx = new Equal_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equal_expression);
						State = 350;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 351;
						Match(EQUALTO);
						State = 352;
						comparison_expression(0);
						}
						break;
					case 2:
						{
						_localctx = new Equal_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equal_expression);
						State = 353;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 354;
						Match(NOTEQ);
						State = 355;
						comparison_expression(0);
						}
						break;
					}
					} 
				}
				State = 360;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Comparison_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARROW() { return GetToken(OxideParser.LARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(OxideParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEQ_OP() { return GetToken(OxideParser.LEQ_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEQ_OP() { return GetToken(OxideParser.GEQ_OP, 0); }
		public Comparison_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_expression; } }
	}

	[RuleVersion(0)]
	public Comparison_expressionContext comparison_expression() {
		return comparison_expression(0);
	}

	private Comparison_expressionContext comparison_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Comparison_expressionContext _localctx = new Comparison_expressionContext(Context, _parentState);
		Comparison_expressionContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_comparison_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 362;
			cast_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 377;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 375;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
					case 1:
						{
						_localctx = new Comparison_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparison_expression);
						State = 364;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 365;
						Match(LARROW);
						}
						break;
					case 2:
						{
						_localctx = new Comparison_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparison_expression);
						State = 366;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 367;
						Match(RARROW);
						State = 368;
						cast_expression(0);
						}
						break;
					case 3:
						{
						_localctx = new Comparison_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparison_expression);
						State = 369;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 370;
						Match(LEQ_OP);
						State = 371;
						cast_expression(0);
						}
						break;
					case 4:
						{
						_localctx = new Comparison_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_comparison_expression);
						State = 372;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 373;
						Match(GEQ_OP);
						State = 374;
						cast_expression(0);
						}
						break;
					}
					} 
				}
				State = 379;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Cast_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Shift_expressionContext shift_expression() {
			return GetRuleContext<Shift_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(OxideParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Cast_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_expression; } }
	}

	[RuleVersion(0)]
	public Cast_expressionContext cast_expression() {
		return cast_expression(0);
	}

	private Cast_expressionContext cast_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Cast_expressionContext _localctx = new Cast_expressionContext(Context, _parentState);
		Cast_expressionContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_cast_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 381;
			shift_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 388;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Cast_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_cast_expression);
					State = 383;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 384;
					Match(AS);
					State = 385;
					type();
					}
					} 
				}
				State = 390;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Add_expressionContext add_expression() {
			return GetRuleContext<Add_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shift_expressionContext shift_expression() {
			return GetRuleContext<Shift_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Left_shiftContext left_shift() {
			return GetRuleContext<Left_shiftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Right_shiftContext right_shift() {
			return GetRuleContext<Right_shiftContext>(0);
		}
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expression; } }
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		return shift_expression(0);
	}

	private Shift_expressionContext shift_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Shift_expressionContext _localctx = new Shift_expressionContext(Context, _parentState);
		Shift_expressionContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_shift_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 392;
			add_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 404;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 402;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
					case 1:
						{
						_localctx = new Shift_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shift_expression);
						State = 394;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 395;
						left_shift();
						State = 396;
						add_expression(0);
						}
						break;
					case 2:
						{
						_localctx = new Shift_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shift_expression);
						State = 398;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 399;
						right_shift();
						State = 400;
						add_expression(0);
						}
						break;
					}
					} 
				}
				State = 406;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Add_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Multiply_expressionContext multiply_expression() {
			return GetRuleContext<Multiply_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_expressionContext add_expression() {
			return GetRuleContext<Add_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(OxideParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(OxideParser.MINUS, 0); }
		public Add_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_expression; } }
	}

	[RuleVersion(0)]
	public Add_expressionContext add_expression() {
		return add_expression(0);
	}

	private Add_expressionContext add_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Add_expressionContext _localctx = new Add_expressionContext(Context, _parentState);
		Add_expressionContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_add_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 408;
			multiply_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 418;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 416;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
					case 1:
						{
						_localctx = new Add_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_add_expression);
						State = 410;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 411;
						Match(PLUS);
						State = 412;
						multiply_expression(0);
						}
						break;
					case 2:
						{
						_localctx = new Add_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_add_expression);
						State = 413;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 414;
						Match(MINUS);
						State = 415;
						multiply_expression(0);
						}
						break;
					}
					} 
				}
				State = 420;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Multiply_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiply_expressionContext multiply_expression() {
			return GetRuleContext<Multiply_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(OxideParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(OxideParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(OxideParser.MOD, 0); }
		public Multiply_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiply_expression; } }
	}

	[RuleVersion(0)]
	public Multiply_expressionContext multiply_expression() {
		return multiply_expression(0);
	}

	private Multiply_expressionContext multiply_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Multiply_expressionContext _localctx = new Multiply_expressionContext(Context, _parentState);
		Multiply_expressionContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_multiply_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 422;
			unary_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 435;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 433;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
					case 1:
						{
						_localctx = new Multiply_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiply_expression);
						State = 424;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 425;
						Match(STAR);
						State = 426;
						unary_expression();
						}
						break;
					case 2:
						{
						_localctx = new Multiply_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiply_expression);
						State = 427;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 428;
						Match(DIV);
						State = 429;
						unary_expression();
						}
						break;
					case 3:
						{
						_localctx = new Multiply_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiply_expression);
						State = 430;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 431;
						Match(MOD);
						State = 432;
						unary_expression();
						}
						break;
					}
					} 
				}
				State = 437;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Base_expressionContext base_expression() {
			return GetRuleContext<Base_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(OxideParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(OxideParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(OxideParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(OxideParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(OxideParser.RBRACK, 0); }
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_unary_expression);
		try {
			State = 450;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 438;
				base_expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 439;
				Match(MINUS);
				State = 440;
				unary_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 441;
				Match(NOT);
				State = 442;
				unary_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 443;
				Match(AMP);
				State = 444;
				unary_expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 445;
				Match(LBRACK);
				State = 446;
				type();
				State = 447;
				Match(RBRACK);
				State = 448;
				unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(OxideParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(OxideParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DERIVED() { return GetToken(OxideParser.DERIVED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF_FIELD() { return GetToken(OxideParser.SELF_FIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_initialiserContext struct_initialiser() {
			return GetRuleContext<Struct_initialiserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_expressionContext block_expression() {
			return GetRuleContext<Block_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Base_expressionContext base_expression() {
			return GetRuleContext<Base_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(OxideParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public Base_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_expression; } }
	}

	[RuleVersion(0)]
	public Base_expressionContext base_expression() {
		return base_expression(0);
	}

	private Base_expressionContext base_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Base_expressionContext _localctx = new Base_expressionContext(Context, _parentState);
		Base_expressionContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_base_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DERIVED) {
					{
					State = 453;
					Match(DERIVED);
					}
				}

				State = 456;
				Match(LBRACK);
				State = 457;
				expression();
				State = 458;
				Match(RBRACK);
				}
				break;
			case 2:
				{
				State = 460;
				literal();
				}
				break;
			case 3:
				{
				State = 462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DERIVED) {
					{
					State = 461;
					Match(DERIVED);
					}
				}

				State = 464;
				Match(SELF_FIELD);
				}
				break;
			case 4:
				{
				State = 466;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DERIVED) {
					{
					State = 465;
					Match(DERIVED);
					}
				}

				State = 468;
				qualified_name();
				}
				break;
			case 5:
				{
				State = 469;
				struct_initialiser();
				}
				break;
			case 6:
				{
				State = 470;
				block_expression();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 484;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 482;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
					case 1:
						{
						_localctx = new Base_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_base_expression);
						State = 473;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 474;
						Match(PERIOD);
						State = 475;
						name();
						}
						break;
					case 2:
						{
						_localctx = new Base_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_base_expression);
						State = 476;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 477;
						Match(LBRACK);
						State = 479;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UNSAFE) | (1L << DERIVED) | (1L << SELF_FIELD) | (1L << RETURN) | (1L << IF) | (1L << LBRACK) | (1L << LBRACE) | (1L << DCOLON) | (1L << AMP) | (1L << MINUS) | (1L << NOT) | (1L << IDENTIFIER) | (1L << INT_NUMBER) | (1L << HEX_NUMBER) | (1L << BINARY_NUMBER) | (1L << STRING_LITERAL) | (1L << TRUE) | (1L << FALSE))) != 0)) {
							{
							State = 478;
							arguments();
							}
						}

						State = 481;
						Match(RBRACK);
						}
						break;
					}
					} 
				}
				State = 486;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Block_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSAFE() { return GetToken(OxideParser.UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public If_expressionContext if_expression() {
			return GetRuleContext<If_expressionContext>(0);
		}
		public Block_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_expression; } }
	}

	[RuleVersion(0)]
	public Block_expressionContext block_expression() {
		Block_expressionContext _localctx = new Block_expressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_block_expression);
		int _la;
		try {
			State = 492;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNSAFE:
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 488;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNSAFE) {
					{
					State = 487;
					Match(UNSAFE);
					}
				}

				State = 490;
				block();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 491;
				if_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(OxideParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(OxideParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public If_expressionContext if_expression() {
			return GetRuleContext<If_expressionContext>(0);
		}
		public If_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_expression; } }
	}

	[RuleVersion(0)]
	public If_expressionContext if_expression() {
		If_expressionContext _localctx = new If_expressionContext(Context, State);
		EnterRule(_localctx, 68, RULE_if_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			Match(IF);
			State = 495;
			expression();
			State = 496;
			block();
			State = 502;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 497;
				Match(ELSE);
				State = 500;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LBRACE:
					{
					State = 498;
					block();
					}
					break;
				case IF:
					{
					State = 499;
					if_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(OxideParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(OxideParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 70, RULE_arguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			argument();
			State = 509;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 505;
					Match(COMMA);
					State = 506;
					argument();
					}
					} 
				}
				State = 511;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			}
			State = 513;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 512;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 72, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 515;
				label();
				}
				break;
			}
			State = 518;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(OxideParser.COLON, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 74, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520;
			name();
			State = 521;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_initialiserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(OxideParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(OxideParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Field_initialiserContext[] field_initialiser() {
			return GetRuleContexts<Field_initialiserContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_initialiserContext field_initialiser(int i) {
			return GetRuleContext<Field_initialiserContext>(i);
		}
		public Struct_initialiserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_initialiser; } }
	}

	[RuleVersion(0)]
	public Struct_initialiserContext struct_initialiser() {
		Struct_initialiserContext _localctx = new Struct_initialiserContext(Context, State);
		EnterRule(_localctx, 76, RULE_struct_initialiser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523;
			name();
			State = 524;
			Match(LBRACE);
			State = 528;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 525;
				field_initialiser();
				}
				}
				State = 530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 531;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_initialiserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(OxideParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Field_initialiserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_initialiser; } }
	}

	[RuleVersion(0)]
	public Field_initialiserContext field_initialiser() {
		Field_initialiserContext _localctx = new Field_initialiserContext(Context, State);
		EnterRule(_localctx, 78, RULE_field_initialiser);
		try {
			State = 540;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 533;
				label();
				State = 534;
				expression();
				State = 535;
				Match(COMMA);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 537;
				name();
				State = 538;
				Match(COMMA);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(OxideParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(OxideParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(OxideParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUT() { return GetToken(OxideParser.MUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(OxideParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Variable_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_statement; } }
	}

	[RuleVersion(0)]
	public Variable_statementContext variable_statement() {
		Variable_statementContext _localctx = new Variable_statementContext(Context, State);
		EnterRule(_localctx, 80, RULE_variable_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			Match(LET);
			State = 544;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MUT) {
				{
				State = 543;
				Match(MUT);
				}
			}

			State = 546;
			name();
			State = 549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 547;
				Match(COLON);
				State = 548;
				type();
				}
			}

			State = 551;
			Match(EQUAL);
			State = 552;
			expression();
			State = 553;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(OxideParser.IDENTIFIER, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 82, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_flagsContext type_flags() {
			return GetRuleContext<Type_flagsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_generic_paramsContext type_generic_params() {
			return GetRuleContext<Type_generic_paramsContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 84, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557;
			type_flags();
			State = 558;
			qualified_name();
			State = 560;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 559;
				type_generic_params();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_generic_paramsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARROW() { return GetToken(OxideParser.LARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(OxideParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(OxideParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(OxideParser.COMMA, i);
		}
		public Type_generic_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_generic_params; } }
	}

	[RuleVersion(0)]
	public Type_generic_paramsContext type_generic_params() {
		Type_generic_paramsContext _localctx = new Type_generic_paramsContext(Context, State);
		EnterRule(_localctx, 86, RULE_type_generic_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			Match(LARROW);
			State = 563;
			type();
			State = 568;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 564;
				Match(COMMA);
				State = 565;
				type();
				}
				}
				State = 570;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 571;
			Match(RARROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_flagsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUT() { return GetToken(OxideParser.MUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(OxideParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DERIVED() { return GetToken(OxideParser.DERIVED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEAK() { return GetToken(OxideParser.WEAK, 0); }
		public Type_flagsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_flags; } }
	}

	[RuleVersion(0)]
	public Type_flagsContext type_flags() {
		Type_flagsContext _localctx = new Type_flagsContext(Context, State);
		EnterRule(_localctx, 88, RULE_type_flags);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << REF) | (1L << WEAK) | (1L << DERIVED))) != 0)) {
				{
				State = 573;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << REF) | (1L << WEAK) | (1L << DERIVED))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MUT) {
				{
				State = 576;
				Match(MUT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
	 
		public VisibilityContext() { }
		public virtual void CopyFrom(VisibilityContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pub_visibilityContext : VisibilityContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUB() { return GetToken(OxideParser.PUB, 0); }
		public Pub_visibilityContext(VisibilityContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(Context, State);
		EnterRule(_localctx, 90, RULE_visibility);
		try {
			_localctx = new Pub_visibilityContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			Match(PUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Int_literalContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(OxideParser.INT_NUMBER, 0); }
		public Int_literalContext(LiteralContext context) { CopyFrom(context); }
	}
	public partial class String_literalContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(OxideParser.STRING_LITERAL, 0); }
		public String_literalContext(LiteralContext context) { CopyFrom(context); }
	}
	public partial class Hex_literalContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(OxideParser.HEX_NUMBER, 0); }
		public Hex_literalContext(LiteralContext context) { CopyFrom(context); }
	}
	public partial class Outer_bool_literalContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_literalContext boolean_literal() {
			return GetRuleContext<Boolean_literalContext>(0);
		}
		public Outer_bool_literalContext(LiteralContext context) { CopyFrom(context); }
	}
	public partial class Binary_literalContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_NUMBER() { return GetToken(OxideParser.BINARY_NUMBER, 0); }
		public Binary_literalContext(LiteralContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 92, RULE_literal);
		try {
			State = 586;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
				_localctx = new Outer_bool_literalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 581;
				boolean_literal();
				}
				break;
			case INT_NUMBER:
				_localctx = new Int_literalContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 582;
				Match(INT_NUMBER);
				}
				break;
			case HEX_NUMBER:
				_localctx = new Hex_literalContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 583;
				Match(HEX_NUMBER);
				}
				break;
			case BINARY_NUMBER:
				_localctx = new Binary_literalContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 584;
				Match(BINARY_NUMBER);
				}
				break;
			case STRING_LITERAL:
				_localctx = new String_literalContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 585;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(OxideParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(OxideParser.FALSE, 0); }
		public Boolean_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_literal; } }
	}

	[RuleVersion(0)]
	public Boolean_literalContext boolean_literal() {
		Boolean_literalContext _localctx = new Boolean_literalContext(Context, State);
		EnterRule(_localctx, 94, RULE_boolean_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Left_shiftContext : ParserRuleContext {
		public IToken f;
		public IToken s;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LARROW() { return GetTokens(OxideParser.LARROW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARROW(int i) {
			return GetToken(OxideParser.LARROW, i);
		}
		public Left_shiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_left_shift; } }
	}

	[RuleVersion(0)]
	public Left_shiftContext left_shift() {
		Left_shiftContext _localctx = new Left_shiftContext(Context, State);
		EnterRule(_localctx, 96, RULE_left_shift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590;
			_localctx.f = Match(LARROW);
			State = 591;
			_localctx.s = Match(LARROW);
			State = 592;
			if (!((_localctx.f!=null?_localctx.f.TokenIndex:0) + 1 == (_localctx.s!=null?_localctx.s.TokenIndex:0))) throw new FailedPredicateException(this, "$f.index + 1 == $s.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_shiftContext : ParserRuleContext {
		public IToken f;
		public IToken s;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RARROW() { return GetTokens(OxideParser.RARROW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW(int i) {
			return GetToken(OxideParser.RARROW, i);
		}
		public Right_shiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_shift; } }
	}

	[RuleVersion(0)]
	public Right_shiftContext right_shift() {
		Right_shiftContext _localctx = new Right_shiftContext(Context, State);
		EnterRule(_localctx, 98, RULE_right_shift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 594;
			_localctx.f = Match(RARROW);
			State = 595;
			_localctx.s = Match(RARROW);
			State = 596;
			if (!((_localctx.f!=null?_localctx.f.TokenIndex:0) + 1 == (_localctx.s!=null?_localctx.s.TokenIndex:0))) throw new FailedPredicateException(this, "$f.index + 1 == $s.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return qualified_name_part_sempred((Qualified_name_partContext)_localctx, predIndex);
		case 20: return or_expression_sempred((Or_expressionContext)_localctx, predIndex);
		case 21: return and_expression_sempred((And_expressionContext)_localctx, predIndex);
		case 22: return inc_or_expression_sempred((Inc_or_expressionContext)_localctx, predIndex);
		case 23: return ex_or_expression_sempred((Ex_or_expressionContext)_localctx, predIndex);
		case 24: return bit_and_expression_sempred((Bit_and_expressionContext)_localctx, predIndex);
		case 25: return equal_expression_sempred((Equal_expressionContext)_localctx, predIndex);
		case 26: return comparison_expression_sempred((Comparison_expressionContext)_localctx, predIndex);
		case 27: return cast_expression_sempred((Cast_expressionContext)_localctx, predIndex);
		case 28: return shift_expression_sempred((Shift_expressionContext)_localctx, predIndex);
		case 29: return add_expression_sempred((Add_expressionContext)_localctx, predIndex);
		case 30: return multiply_expression_sempred((Multiply_expressionContext)_localctx, predIndex);
		case 32: return base_expression_sempred((Base_expressionContext)_localctx, predIndex);
		case 48: return left_shift_sempred((Left_shiftContext)_localctx, predIndex);
		case 49: return right_shift_sempred((Right_shiftContext)_localctx, predIndex);
		}
		return true;
	}
	private bool qualified_name_part_sempred(Qualified_name_partContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool or_expression_sempred(Or_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool and_expression_sempred(And_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool inc_or_expression_sempred(Inc_or_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool ex_or_expression_sempred(Ex_or_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bit_and_expression_sempred(Bit_and_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equal_expression_sempred(Equal_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool comparison_expression_sempred(Comparison_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 4);
		case 9: return Precpred(Context, 3);
		case 10: return Precpred(Context, 2);
		case 11: return Precpred(Context, 1);
		}
		return true;
	}
	private bool cast_expression_sempred(Cast_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool shift_expression_sempred(Shift_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool add_expression_sempred(Add_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 2);
		case 16: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiply_expression_sempred(Multiply_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17: return Precpred(Context, 3);
		case 18: return Precpred(Context, 2);
		case 19: return Precpred(Context, 1);
		}
		return true;
	}
	private bool base_expression_sempred(Base_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return Precpred(Context, 2);
		case 21: return Precpred(Context, 1);
		}
		return true;
	}
	private bool left_shift_sempred(Left_shiftContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return (_localctx.f!=null?_localctx.f.TokenIndex:0) + 1 == (_localctx.s!=null?_localctx.s.TokenIndex:0);
		}
		return true;
	}
	private bool right_shift_sempred(Right_shiftContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return (_localctx.f!=null?_localctx.f.TokenIndex:0) + 1 == (_localctx.s!=null?_localctx.s.TokenIndex:0);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '<', '\x259', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x3', '\x2', '\x3', '\x2', 
		'\a', '\x2', 'i', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'l', '\v', '\x2', 
		'\x3', '\x2', '\a', '\x2', 'o', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'r', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '}', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x85', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '\x88', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '\x8D', '\n', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '\x93', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x5', '\b', '\x98', '\n', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\x9D', '\n', '\b', '\x3', '\b', 
		'\x3', '\b', '\a', '\b', '\xA1', '\n', '\b', '\f', '\b', '\xE', '\b', 
		'\xA4', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\a', '\t', '\xAC', '\n', '\t', '\f', '\t', 
		'\xE', '\t', '\xAF', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x5', '\n', '\xB4', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', '\xBF', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x5', 
		'\v', '\xC3', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xC7', 
		'\n', '\v', '\x3', '\f', '\x3', '\f', '\a', '\f', '\xCB', '\n', '\f', 
		'\f', '\f', '\xE', '\f', '\xCE', '\v', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xD6', 
		'\n', '\r', '\f', '\r', '\xE', '\r', '\xD9', '\v', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xE0', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xE3', '\v', '\xE', '\x3', '\xF', 
		'\x5', '\xF', '\xE6', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xEE', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xF1', '\v', '\xF', '\x5', '\xF', 
		'\xF3', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\xF8', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\x103', '\n', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x107', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x5', '\x12', '\x10B', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x6', '\x13', '\x110', '\n', '\x13', '\r', '\x13', '\xE', '\x13', 
		'\x111', '\x3', '\x13', '\x5', '\x13', '\x115', '\n', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\x118', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x120', 
		'\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', 
		'\x125', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x12D', '\n', '\x16', 
		'\f', '\x16', '\xE', '\x16', '\x130', '\v', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', 
		'\x17', '\x138', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x13B', '\v', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\a', '\x18', '\x143', '\n', '\x18', '\f', '\x18', 
		'\xE', '\x18', '\x146', '\v', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x14E', 
		'\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x151', '\v', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\a', '\x1A', '\x159', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', 
		'\x15C', '\v', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\a', '\x1B', '\x167', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', 
		'\x16A', '\v', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\a', '\x1C', '\x17A', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', 
		'\x17D', '\v', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x185', '\n', '\x1D', 
		'\f', '\x1D', '\xE', '\x1D', '\x188', '\v', '\x1D', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\a', 
		'\x1E', '\x195', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', '\x198', '\v', 
		'\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\a', 
		'\x1F', '\x1A3', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x1A6', '\v', 
		'\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\a', ' ', '\x1B4', '\n', ' ', '\f', ' ', '\xE', ' ', '\x1B7', '\v', 
		' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x5', '!', '\x1C5', '\n', '!', '\x3', '\"', '\x3', '\"', '\x5', 
		'\"', '\x1C9', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x1D1', '\n', '\"', '\x3', 
		'\"', '\x3', '\"', '\x5', '\"', '\x1D5', '\n', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x5', '\"', '\x1DA', '\n', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', 
		'\x1E2', '\n', '\"', '\x3', '\"', '\a', '\"', '\x1E5', '\n', '\"', '\f', 
		'\"', '\xE', '\"', '\x1E8', '\v', '\"', '\x3', '#', '\x5', '#', '\x1EB', 
		'\n', '#', '\x3', '#', '\x3', '#', '\x5', '#', '\x1EF', '\n', '#', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', 
		'$', '\x1F7', '\n', '$', '\x5', '$', '\x1F9', '\n', '$', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\a', '%', '\x1FE', '\n', '%', '\f', '%', '\xE', '%', 
		'\x201', '\v', '%', '\x3', '%', '\x5', '%', '\x204', '\n', '%', '\x3', 
		'&', '\x5', '&', '\x207', '\n', '&', '\x3', '&', '\x3', '&', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\a', '(', 
		'\x211', '\n', '(', '\f', '(', '\xE', '(', '\x214', '\v', '(', '\x3', 
		'(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x5', ')', '\x21F', '\n', ')', '\x3', '*', 
		'\x3', '*', '\x5', '*', '\x223', '\n', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x5', '*', '\x228', '\n', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\x5', ',', '\x233', '\n', ',', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\a', '-', '\x239', '\n', '-', '\f', '-', '\xE', '-', '\x23C', '\v', 
		'-', '\x3', '-', '\x3', '-', '\x3', '.', '\x5', '.', '\x241', '\n', '.', 
		'\x3', '.', '\x5', '.', '\x244', '\n', '.', '\x3', '/', '\x3', '/', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', 
		'\x30', '\x24D', '\n', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x2', '\xF', '\b', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '\x42', 
		'\x34', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 
		'Z', '\\', '^', '`', '\x62', '\x64', '\x2', '\x4', '\x3', '\x2', '\x11', 
		'\x13', '\x3', '\x2', ';', '<', '\x2', '\x27B', '\x2', '\x66', '\x3', 
		'\x2', '\x2', '\x2', '\x4', 'u', '\x3', '\x2', '\x2', '\x2', '\x6', '|', 
		'\x3', '\x2', '\x2', '\x2', '\b', '~', '\x3', '\x2', '\x2', '\x2', '\n', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\f', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x97', '\x3', '\x2', '\x2', '\x2', '\x10', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\x16', '\xC8', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\xD1', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xDA', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xE5', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x102', '\x3', '\x2', '\x2', '\x2', ' ', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\x108', '\x3', '\x2', '\x2', '\x2', '$', '\x117', '\x3', 
		'\x2', '\x2', '\x2', '&', '\x11F', '\x3', '\x2', '\x2', '\x2', '(', '\x124', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x126', '\x3', '\x2', '\x2', '\x2', 
		',', '\x131', '\x3', '\x2', '\x2', '\x2', '.', '\x13C', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x147', '\x3', '\x2', '\x2', '\x2', '\x32', '\x152', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x15D', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x38', '\x17E', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x189', '\x3', '\x2', '\x2', '\x2', '<', '\x199', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x1A7', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x42', '\x1D9', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x46', '\x1F0', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x1FA', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x206', '\x3', '\x2', '\x2', '\x2', 'L', '\x20A', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x20D', '\x3', '\x2', '\x2', '\x2', 'P', '\x21E', 
		'\x3', '\x2', '\x2', '\x2', 'R', '\x220', '\x3', '\x2', '\x2', '\x2', 
		'T', '\x22D', '\x3', '\x2', '\x2', '\x2', 'V', '\x22F', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\x234', '\x3', '\x2', '\x2', '\x2', 'Z', '\x240', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\x245', '\x3', '\x2', '\x2', '\x2', 
		'^', '\x24C', '\x3', '\x2', '\x2', '\x2', '`', '\x24E', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x250', '\x3', '\x2', '\x2', '\x2', '\x64', '\x254', 
		'\x3', '\x2', '\x2', '\x2', '\x66', 'j', '\x5', '\x4', '\x3', '\x2', 'g', 
		'i', '\x5', '\f', '\a', '\x2', 'h', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 
		'l', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'p', '\x3', '\x2', '\x2', '\x2', 
		'l', 'j', '\x3', '\x2', '\x2', '\x2', 'm', 'o', '\x5', '\n', '\x6', '\x2', 
		'n', 'm', '\x3', '\x2', '\x2', '\x2', 'o', 'r', '\x3', '\x2', '\x2', '\x2', 
		'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', '\x2', '\x2', '\x2', 
		'q', 's', '\x3', '\x2', '\x2', '\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 
		's', 't', '\a', '\x2', '\x2', '\x3', 't', '\x3', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'v', '\a', '\x6', '\x2', '\x2', 'v', 'w', '\x5', '\x6', '\x4', 
		'\x2', 'w', 'x', '\a', ' ', '\x2', '\x2', 'x', '\x5', '\x3', '\x2', '\x2', 
		'\x2', 'y', '}', '\x5', '\b', '\x5', '\x2', 'z', '{', '\a', '\x1F', '\x2', 
		'\x2', '{', '}', '\x5', '\b', '\x5', '\x2', '|', 'y', '\x3', '\x2', '\x2', 
		'\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '}', '\a', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x7F', '\b', '\x5', '\x1', '\x2', '\x7F', '\x80', 
		'\a', '\x35', '\x2', '\x2', '\x80', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x82', '\f', '\x3', '\x2', '\x2', '\x82', '\x83', '\a', '\x1F', 
		'\x2', '\x2', '\x83', '\x85', '\a', '\x35', '\x2', '\x2', '\x84', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x85', '\x88', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '\x87', '\t', '\x3', '\x2', '\x2', '\x2', '\x88', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\x89', '\x8D', '\x5', '\xE', '\b', '\x2', 
		'\x8A', '\x8D', '\x5', '\x14', '\v', '\x2', '\x8B', '\x8D', '\x5', '\x1C', 
		'\xF', '\x2', '\x8C', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8A', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x8D', '\v', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\a', '\a', 
		'\x2', '\x2', '\x8F', '\x92', '\x5', '\x6', '\x4', '\x2', '\x90', '\x91', 
		'\a', '.', '\x2', '\x2', '\x91', '\x93', '\x5', 'T', '+', '\x2', '\x92', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\a', 
		' ', '\x2', '\x2', '\x95', '\r', '\x3', '\x2', '\x2', '\x2', '\x96', '\x98', 
		'\x5', '\\', '/', '\x2', '\x97', '\x96', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x9A', '\a', '\n', '\x2', '\x2', '\x9A', '\x9C', '\x5', 
		'T', '+', '\x2', '\x9B', '\x9D', '\x5', '\x10', '\t', '\x2', '\x9C', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA2', '\a', '\x1C', 
		'\x2', '\x2', '\x9F', '\xA1', '\x5', '\x12', '\n', '\x2', '\xA0', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\xA1', '\xA4', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\xA3', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA2', 
		'\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\a', '\x1D', '\x2', '\x2', 
		'\xA6', '\xF', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\a', '\x1A', 
		'\x2', '\x2', '\xA8', '\xAD', '\x5', 'T', '+', '\x2', '\xA9', '\xAA', 
		'\a', '$', '\x2', '\x2', '\xAA', '\xAC', '\x5', 'T', '+', '\x2', '\xAB', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\a', '\x1B', '\x2', 
		'\x2', '\xB1', '\x11', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB4', '\x5', 
		'\\', '/', '\x2', '\xB3', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xB6', '\x5', 'T', '+', '\x2', '\xB6', '\xB7', '\a', '\x1E', 
		'\x2', '\x2', '\xB7', '\xB8', '\x5', 'V', ',', '\x2', '\xB8', '\xB9', 
		'\a', '$', '\x2', '\x2', '\xB9', '\x13', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xBE', '\a', '\v', '\x2', '\x2', '\xBB', '\xBC', '\x5', '\x6', '\x4', 
		'\x2', '\xBC', '\xBD', '\a', '\r', '\x2', '\x2', '\xBD', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\xC2', '\x5', 'V', ',', '\x2', '\xC1', '\xC3', '\x5', 
		'\x18', '\r', '\x2', '\xC2', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC6', '\x3', '\x2', '\x2', 
		'\x2', '\xC4', '\xC7', '\a', ' ', '\x2', '\x2', '\xC5', '\xC7', '\x5', 
		'\x16', '\f', '\x2', '\xC6', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xCC', '\a', '\x1C', '\x2', '\x2', '\xC9', '\xCB', '\x5', 
		'\x1C', '\xF', '\x2', '\xCA', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCA', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'\xD0', '\a', '\x1D', '\x2', '\x2', '\xD0', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xD2', '\a', '\f', '\x2', '\x2', '\xD2', '\xD7', '\x5', 
		'\x1A', '\xE', '\x2', '\xD3', '\xD4', '\a', '$', '\x2', '\x2', '\xD4', 
		'\xD6', '\x5', '\x1A', '\xE', '\x2', '\xD5', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD6', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD5', '\x3', 
		'\x2', '\x2', '\x2', '\xD7', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD8', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '\xDB', '\x5', 'T', '+', '\x2', '\xDB', '\xDC', '\a', '\x1E', 
		'\x2', '\x2', '\xDC', '\xE1', '\x5', 'V', ',', '\x2', '\xDD', '\xDE', 
		'\a', '%', '\x2', '\x2', '\xDE', '\xE0', '\x5', 'V', ',', '\x2', '\xDF', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE1', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE6', '\x5', '\\', '/', 
		'\x2', '\xE5', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xE8', '\a', '\xF', '\x2', '\x2', '\xE8', '\xE9', '\x5', 'T', '+', '\x2', 
		'\xE9', '\xF2', '\a', '\x18', '\x2', '\x2', '\xEA', '\xEF', '\x5', '\x1E', 
		'\x10', '\x2', '\xEB', '\xEC', '\a', '$', '\x2', '\x2', '\xEC', '\xEE', 
		'\x5', '\x1E', '\x10', '\x2', '\xED', '\xEB', '\x3', '\x2', '\x2', '\x2', 
		'\xEE', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\xEF', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\xF1', '\xEF', '\x3', '\x2', '\x2', '\x2', 
		'\xF2', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\x3', '\x2', 
		'\x2', '\x2', '\xF3', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF7', 
		'\a', '\x19', '\x2', '\x2', '\xF5', '\xF6', '\a', '!', '\x2', '\x2', '\xF6', 
		'\xF8', '\x5', 'V', ',', '\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\xF7', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', '\x3', '\x2', 
		'\x2', '\x2', '\xF9', '\xFA', '\x5', ' ', '\x11', '\x2', '\xFA', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\x5', 'T', '+', '\x2', '\xFC', 
		'\xFD', '\a', '\x1E', '\x2', '\x2', '\xFD', '\xFE', '\x5', 'V', ',', '\x2', 
		'\xFE', '\x103', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\x5', 'Z', 
		'.', '\x2', '\x100', '\x101', '\a', '\x14', '\x2', '\x2', '\x101', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\xFB', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x103', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x104', '\x107', '\x5', '\"', '\x12', '\x2', '\x105', '\x107', 
		'\a', ' ', '\x2', '\x2', '\x106', '\x104', '\x3', '\x2', '\x2', '\x2', 
		'\x106', '\x105', '\x3', '\x2', '\x2', '\x2', '\x107', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x108', '\x10A', '\a', '\x1C', '\x2', '\x2', '\x109', '\x10B', 
		'\x5', '$', '\x13', '\x2', '\x10A', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\x3', 
		'\x2', '\x2', '\x2', '\x10C', '\x10D', '\a', '\x1D', '\x2', '\x2', '\x10D', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x110', '\x5', '&', '\x14', 
		'\x2', '\x10F', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x110', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\x111', '\x112', '\x3', '\x2', '\x2', '\x2', '\x112', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x113', '\x115', '\x5', '(', '\x15', '\x2', '\x114', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x114', '\x115', '\x3', '\x2', '\x2', 
		'\x2', '\x115', '\x118', '\x3', '\x2', '\x2', '\x2', '\x116', '\x118', 
		'\x5', '(', '\x15', '\x2', '\x117', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\x117', '\x116', '\x3', '\x2', '\x2', '\x2', '\x118', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x119', '\x120', '\a', ' ', '\x2', '\x2', '\x11A', '\x11B', 
		'\x5', '(', '\x15', '\x2', '\x11B', '\x11C', '\a', ' ', '\x2', '\x2', 
		'\x11C', '\x120', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x120', '\x5', 
		'\x44', '#', '\x2', '\x11E', '\x120', '\x5', 'R', '*', '\x2', '\x11F', 
		'\x119', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x11A', '\x3', '\x2', '\x2', 
		'\x2', '\x11F', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x11E', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\x121', '\x125', '\x5', '*', '\x16', '\x2', '\x122', '\x123', '\a', '\x15', 
		'\x2', '\x2', '\x123', '\x125', '\x5', '*', '\x16', '\x2', '\x124', '\x121', 
		'\x3', '\x2', '\x2', '\x2', '\x124', '\x122', '\x3', '\x2', '\x2', '\x2', 
		'\x125', ')', '\x3', '\x2', '\x2', '\x2', '\x126', '\x127', '\b', '\x16', 
		'\x1', '\x2', '\x127', '\x128', '\x5', ',', '\x17', '\x2', '\x128', '\x12E', 
		'\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\f', '\x3', '\x2', '\x2', 
		'\x12A', '\x12B', '\a', '/', '\x2', '\x2', '\x12B', '\x12D', '\x5', ',', 
		'\x17', '\x2', '\x12C', '\x129', '\x3', '\x2', '\x2', '\x2', '\x12D', 
		'\x130', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12C', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x12F', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x130', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x131', 
		'\x132', '\b', '\x17', '\x1', '\x2', '\x132', '\x133', '\x5', '.', '\x18', 
		'\x2', '\x133', '\x139', '\x3', '\x2', '\x2', '\x2', '\x134', '\x135', 
		'\f', '\x3', '\x2', '\x2', '\x135', '\x136', '\a', '\x30', '\x2', '\x2', 
		'\x136', '\x138', '\x5', '.', '\x18', '\x2', '\x137', '\x134', '\x3', 
		'\x2', '\x2', '\x2', '\x138', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x139', 
		'\x137', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '-', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x139', '\x3', 
		'\x2', '\x2', '\x2', '\x13C', '\x13D', '\b', '\x18', '\x1', '\x2', '\x13D', 
		'\x13E', '\x5', '\x30', '\x19', '\x2', '\x13E', '\x144', '\x3', '\x2', 
		'\x2', '\x2', '\x13F', '\x140', '\f', '\x3', '\x2', '\x2', '\x140', '\x141', 
		'\a', '\x31', '\x2', '\x2', '\x141', '\x143', '\x5', '\x30', '\x19', '\x2', 
		'\x142', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x143', '\x146', '\x3', 
		'\x2', '\x2', '\x2', '\x144', '\x142', '\x3', '\x2', '\x2', '\x2', '\x144', 
		'\x145', '\x3', '\x2', '\x2', '\x2', '\x145', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x146', '\x144', '\x3', '\x2', '\x2', '\x2', '\x147', '\x148', 
		'\b', '\x19', '\x1', '\x2', '\x148', '\x149', '\x5', '\x32', '\x1A', '\x2', 
		'\x149', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', '\f', 
		'\x3', '\x2', '\x2', '\x14B', '\x14C', '\a', '\x32', '\x2', '\x2', '\x14C', 
		'\x14E', '\x5', '\x32', '\x1A', '\x2', '\x14D', '\x14A', '\x3', '\x2', 
		'\x2', '\x2', '\x14E', '\x151', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x14D', 
		'\x3', '\x2', '\x2', '\x2', '\x14F', '\x150', '\x3', '\x2', '\x2', '\x2', 
		'\x150', '\x31', '\x3', '\x2', '\x2', '\x2', '\x151', '\x14F', '\x3', 
		'\x2', '\x2', '\x2', '\x152', '\x153', '\b', '\x1A', '\x1', '\x2', '\x153', 
		'\x154', '\x5', '\x34', '\x1B', '\x2', '\x154', '\x15A', '\x3', '\x2', 
		'\x2', '\x2', '\x155', '\x156', '\f', '\x3', '\x2', '\x2', '\x156', '\x157', 
		'\a', '\"', '\x2', '\x2', '\x157', '\x159', '\x5', '\x34', '\x1B', '\x2', 
		'\x158', '\x155', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15C', '\x3', 
		'\x2', '\x2', '\x2', '\x15A', '\x158', '\x3', '\x2', '\x2', '\x2', '\x15A', 
		'\x15B', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x15C', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15E', 
		'\b', '\x1B', '\x1', '\x2', '\x15E', '\x15F', '\x5', '\x36', '\x1C', '\x2', 
		'\x15F', '\x168', '\x3', '\x2', '\x2', '\x2', '\x160', '\x161', '\f', 
		'\x4', '\x2', '\x2', '\x161', '\x162', '\a', ')', '\x2', '\x2', '\x162', 
		'\x167', '\x5', '\x36', '\x1C', '\x2', '\x163', '\x164', '\f', '\x3', 
		'\x2', '\x2', '\x164', '\x165', '\a', '(', '\x2', '\x2', '\x165', '\x167', 
		'\x5', '\x36', '\x1C', '\x2', '\x166', '\x160', '\x3', '\x2', '\x2', '\x2', 
		'\x166', '\x163', '\x3', '\x2', '\x2', '\x2', '\x167', '\x16A', '\x3', 
		'\x2', '\x2', '\x2', '\x168', '\x166', '\x3', '\x2', '\x2', '\x2', '\x168', 
		'\x169', '\x3', '\x2', '\x2', '\x2', '\x169', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x16A', '\x168', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16C', 
		'\b', '\x1C', '\x1', '\x2', '\x16C', '\x16D', '\x5', '\x38', '\x1D', '\x2', 
		'\x16D', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x16F', '\f', 
		'\x6', '\x2', '\x2', '\x16F', '\x17A', '\a', '\x1A', '\x2', '\x2', '\x170', 
		'\x171', '\f', '\x5', '\x2', '\x2', '\x171', '\x172', '\a', '\x1B', '\x2', 
		'\x2', '\x172', '\x17A', '\x5', '\x38', '\x1D', '\x2', '\x173', '\x174', 
		'\f', '\x4', '\x2', '\x2', '\x174', '\x175', '\a', '\x33', '\x2', '\x2', 
		'\x175', '\x17A', '\x5', '\x38', '\x1D', '\x2', '\x176', '\x177', '\f', 
		'\x3', '\x2', '\x2', '\x177', '\x178', '\a', '\x34', '\x2', '\x2', '\x178', 
		'\x17A', '\x5', '\x38', '\x1D', '\x2', '\x179', '\x16E', '\x3', '\x2', 
		'\x2', '\x2', '\x179', '\x170', '\x3', '\x2', '\x2', '\x2', '\x179', '\x173', 
		'\x3', '\x2', '\x2', '\x2', '\x179', '\x176', '\x3', '\x2', '\x2', '\x2', 
		'\x17A', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x179', '\x3', 
		'\x2', '\x2', '\x2', '\x17B', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17C', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17B', '\x3', '\x2', '\x2', 
		'\x2', '\x17E', '\x17F', '\b', '\x1D', '\x1', '\x2', '\x17F', '\x180', 
		'\x5', ':', '\x1E', '\x2', '\x180', '\x186', '\x3', '\x2', '\x2', '\x2', 
		'\x181', '\x182', '\f', '\x3', '\x2', '\x2', '\x182', '\x183', '\a', '.', 
		'\x2', '\x2', '\x183', '\x185', '\x5', 'V', ',', '\x2', '\x184', '\x181', 
		'\x3', '\x2', '\x2', '\x2', '\x185', '\x188', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\x184', '\x3', '\x2', '\x2', '\x2', '\x186', '\x187', '\x3', 
		'\x2', '\x2', '\x2', '\x187', '\x39', '\x3', '\x2', '\x2', '\x2', '\x188', 
		'\x186', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18A', '\b', '\x1E', '\x1', 
		'\x2', '\x18A', '\x18B', '\x5', '<', '\x1F', '\x2', '\x18B', '\x196', 
		'\x3', '\x2', '\x2', '\x2', '\x18C', '\x18D', '\f', '\x4', '\x2', '\x2', 
		'\x18D', '\x18E', '\x5', '\x62', '\x32', '\x2', '\x18E', '\x18F', '\x5', 
		'<', '\x1F', '\x2', '\x18F', '\x195', '\x3', '\x2', '\x2', '\x2', '\x190', 
		'\x191', '\f', '\x3', '\x2', '\x2', '\x191', '\x192', '\x5', '\x64', '\x33', 
		'\x2', '\x192', '\x193', '\x5', '<', '\x1F', '\x2', '\x193', '\x195', 
		'\x3', '\x2', '\x2', '\x2', '\x194', '\x18C', '\x3', '\x2', '\x2', '\x2', 
		'\x194', '\x190', '\x3', '\x2', '\x2', '\x2', '\x195', '\x198', '\x3', 
		'\x2', '\x2', '\x2', '\x196', '\x194', '\x3', '\x2', '\x2', '\x2', '\x196', 
		'\x197', '\x3', '\x2', '\x2', '\x2', '\x197', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x198', '\x196', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19A', 
		'\b', '\x1F', '\x1', '\x2', '\x19A', '\x19B', '\x5', '>', ' ', '\x2', 
		'\x19B', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19D', '\f', 
		'\x4', '\x2', '\x2', '\x19D', '\x19E', '\a', '%', '\x2', '\x2', '\x19E', 
		'\x1A3', '\x5', '>', ' ', '\x2', '\x19F', '\x1A0', '\f', '\x3', '\x2', 
		'\x2', '\x1A0', '\x1A1', '\a', '&', '\x2', '\x2', '\x1A1', '\x1A3', '\x5', 
		'>', ' ', '\x2', '\x1A2', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x1A2', 
		'\x19F', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A6', '\x3', '\x2', '\x2', 
		'\x2', '\x1A4', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A5', 
		'\x3', '\x2', '\x2', '\x2', '\x1A5', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x1A6', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A8', '\b', 
		' ', '\x1', '\x2', '\x1A8', '\x1A9', '\x5', '@', '!', '\x2', '\x1A9', 
		'\x1B5', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\f', '\x5', '\x2', 
		'\x2', '\x1AB', '\x1AC', '\a', '*', '\x2', '\x2', '\x1AC', '\x1B4', '\x5', 
		'@', '!', '\x2', '\x1AD', '\x1AE', '\f', '\x4', '\x2', '\x2', '\x1AE', 
		'\x1AF', '\a', '+', '\x2', '\x2', '\x1AF', '\x1B4', '\x5', '@', '!', '\x2', 
		'\x1B0', '\x1B1', '\f', '\x3', '\x2', '\x2', '\x1B1', '\x1B2', '\a', ',', 
		'\x2', '\x2', '\x1B2', '\x1B4', '\x5', '@', '!', '\x2', '\x1B3', '\x1AA', 
		'\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1AD', '\x3', '\x2', '\x2', '\x2', 
		'\x1B3', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B7', '\x3', 
		'\x2', '\x2', '\x2', '\x1B5', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1B5', 
		'\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B6', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x1B7', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1C5', 
		'\x5', '\x42', '\"', '\x2', '\x1B9', '\x1BA', '\a', '&', '\x2', '\x2', 
		'\x1BA', '\x1C5', '\x5', '@', '!', '\x2', '\x1BB', '\x1BC', '\a', '-', 
		'\x2', '\x2', '\x1BC', '\x1C5', '\x5', '@', '!', '\x2', '\x1BD', '\x1BE', 
		'\a', '\"', '\x2', '\x2', '\x1BE', '\x1C5', '\x5', '@', '!', '\x2', '\x1BF', 
		'\x1C0', '\a', '\x18', '\x2', '\x2', '\x1C0', '\x1C1', '\x5', 'V', ',', 
		'\x2', '\x1C1', '\x1C2', '\a', '\x19', '\x2', '\x2', '\x1C2', '\x1C3', 
		'\x5', '@', '!', '\x2', '\x1C3', '\x1C5', '\x3', '\x2', '\x2', '\x2', 
		'\x1C4', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1B9', '\x3', 
		'\x2', '\x2', '\x2', '\x1C4', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1C4', 
		'\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1BF', '\x3', '\x2', '\x2', 
		'\x2', '\x1C5', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1C8', 
		'\b', '\"', '\x1', '\x2', '\x1C7', '\x1C9', '\a', '\x13', '\x2', '\x2', 
		'\x1C8', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C9', '\x3', 
		'\x2', '\x2', '\x2', '\x1C9', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CA', 
		'\x1CB', '\a', '\x18', '\x2', '\x2', '\x1CB', '\x1CC', '\x5', '(', '\x15', 
		'\x2', '\x1CC', '\x1CD', '\a', '\x19', '\x2', '\x2', '\x1CD', '\x1DA', 
		'\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1DA', '\x5', '^', '\x30', '\x2', 
		'\x1CF', '\x1D1', '\a', '\x13', '\x2', '\x2', '\x1D0', '\x1CF', '\x3', 
		'\x2', '\x2', '\x2', '\x1D0', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D1', 
		'\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1DA', '\a', '\x14', '\x2', 
		'\x2', '\x1D3', '\x1D5', '\a', '\x13', '\x2', '\x2', '\x1D4', '\x1D3', 
		'\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D5', '\x3', '\x2', '\x2', '\x2', 
		'\x1D5', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1DA', '\x5', 
		'\x6', '\x4', '\x2', '\x1D7', '\x1DA', '\x5', 'N', '(', '\x2', '\x1D8', 
		'\x1DA', '\x5', '\x44', '#', '\x2', '\x1D9', '\x1C6', '\x3', '\x2', '\x2', 
		'\x2', '\x1D9', '\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1D0', 
		'\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1D4', '\x3', '\x2', '\x2', '\x2', 
		'\x1D9', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1D8', '\x3', 
		'\x2', '\x2', '\x2', '\x1DA', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1DB', 
		'\x1DC', '\f', '\x4', '\x2', '\x2', '\x1DC', '\x1DD', '\a', '#', '\x2', 
		'\x2', '\x1DD', '\x1E5', '\x5', 'T', '+', '\x2', '\x1DE', '\x1DF', '\f', 
		'\x3', '\x2', '\x2', '\x1DF', '\x1E1', '\a', '\x18', '\x2', '\x2', '\x1E0', 
		'\x1E2', '\x5', 'H', '%', '\x2', '\x1E1', '\x1E0', '\x3', '\x2', '\x2', 
		'\x2', '\x1E1', '\x1E2', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E3', 
		'\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E5', '\a', '\x19', '\x2', '\x2', 
		'\x1E4', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1DE', '\x3', 
		'\x2', '\x2', '\x2', '\x1E5', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1E6', 
		'\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E7', '\x3', '\x2', '\x2', 
		'\x2', '\x1E7', '\x43', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E6', 
		'\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EB', '\a', '\x10', '\x2', '\x2', 
		'\x1EA', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1EB', '\x3', 
		'\x2', '\x2', '\x2', '\x1EB', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1EC', 
		'\x1EF', '\x5', '\"', '\x12', '\x2', '\x1ED', '\x1EF', '\x5', '\x46', 
		'$', '\x2', '\x1EE', '\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1ED', 
		'\x3', '\x2', '\x2', '\x2', '\x1EF', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x1F0', '\x1F1', '\a', '\x16', '\x2', '\x2', '\x1F1', '\x1F2', '\x5', 
		'(', '\x15', '\x2', '\x1F2', '\x1F8', '\x5', '\"', '\x12', '\x2', '\x1F3', 
		'\x1F6', '\a', '\x17', '\x2', '\x2', '\x1F4', '\x1F7', '\x5', '\"', '\x12', 
		'\x2', '\x1F5', '\x1F7', '\x5', '\x46', '$', '\x2', '\x1F6', '\x1F4', 
		'\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F5', '\x3', '\x2', '\x2', '\x2', 
		'\x1F7', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F3', '\x3', 
		'\x2', '\x2', '\x2', '\x1F8', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1F9', 
		'G', '\x3', '\x2', '\x2', '\x2', '\x1FA', '\x1FF', '\x5', 'J', '&', '\x2', 
		'\x1FB', '\x1FC', '\a', '$', '\x2', '\x2', '\x1FC', '\x1FE', '\x5', 'J', 
		'&', '\x2', '\x1FD', '\x1FB', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x201', 
		'\x3', '\x2', '\x2', '\x2', '\x1FF', '\x1FD', '\x3', '\x2', '\x2', '\x2', 
		'\x1FF', '\x200', '\x3', '\x2', '\x2', '\x2', '\x200', '\x203', '\x3', 
		'\x2', '\x2', '\x2', '\x201', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x202', 
		'\x204', '\a', '$', '\x2', '\x2', '\x203', '\x202', '\x3', '\x2', '\x2', 
		'\x2', '\x203', '\x204', '\x3', '\x2', '\x2', '\x2', '\x204', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x205', '\x207', '\x5', 'L', '\'', '\x2', '\x206', 
		'\x205', '\x3', '\x2', '\x2', '\x2', '\x206', '\x207', '\x3', '\x2', '\x2', 
		'\x2', '\x207', '\x208', '\x3', '\x2', '\x2', '\x2', '\x208', '\x209', 
		'\x5', '(', '\x15', '\x2', '\x209', 'K', '\x3', '\x2', '\x2', '\x2', '\x20A', 
		'\x20B', '\x5', 'T', '+', '\x2', '\x20B', '\x20C', '\a', '\x1E', '\x2', 
		'\x2', '\x20C', 'M', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x20E', '\x5', 
		'T', '+', '\x2', '\x20E', '\x212', '\a', '\x1C', '\x2', '\x2', '\x20F', 
		'\x211', '\x5', 'P', ')', '\x2', '\x210', '\x20F', '\x3', '\x2', '\x2', 
		'\x2', '\x211', '\x214', '\x3', '\x2', '\x2', '\x2', '\x212', '\x210', 
		'\x3', '\x2', '\x2', '\x2', '\x212', '\x213', '\x3', '\x2', '\x2', '\x2', 
		'\x213', '\x215', '\x3', '\x2', '\x2', '\x2', '\x214', '\x212', '\x3', 
		'\x2', '\x2', '\x2', '\x215', '\x216', '\a', '\x1D', '\x2', '\x2', '\x216', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x217', '\x218', '\x5', 'L', '\'', '\x2', 
		'\x218', '\x219', '\x5', '(', '\x15', '\x2', '\x219', '\x21A', '\a', '$', 
		'\x2', '\x2', '\x21A', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x21C', 
		'\x5', 'T', '+', '\x2', '\x21C', '\x21D', '\a', '$', '\x2', '\x2', '\x21D', 
		'\x21F', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x217', '\x3', '\x2', '\x2', 
		'\x2', '\x21E', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x21F', 'Q', '\x3', 
		'\x2', '\x2', '\x2', '\x220', '\x222', '\a', '\xE', '\x2', '\x2', '\x221', 
		'\x223', '\a', '\t', '\x2', '\x2', '\x222', '\x221', '\x3', '\x2', '\x2', 
		'\x2', '\x222', '\x223', '\x3', '\x2', '\x2', '\x2', '\x223', '\x224', 
		'\x3', '\x2', '\x2', '\x2', '\x224', '\x227', '\x5', 'T', '+', '\x2', 
		'\x225', '\x226', '\a', '\x1E', '\x2', '\x2', '\x226', '\x228', '\x5', 
		'V', ',', '\x2', '\x227', '\x225', '\x3', '\x2', '\x2', '\x2', '\x227', 
		'\x228', '\x3', '\x2', '\x2', '\x2', '\x228', '\x229', '\x3', '\x2', '\x2', 
		'\x2', '\x229', '\x22A', '\a', '\'', '\x2', '\x2', '\x22A', '\x22B', '\x5', 
		'(', '\x15', '\x2', '\x22B', '\x22C', '\a', ' ', '\x2', '\x2', '\x22C', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x22E', '\a', '\x35', '\x2', 
		'\x2', '\x22E', 'U', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x230', '\x5', 
		'Z', '.', '\x2', '\x230', '\x232', '\x5', '\x6', '\x4', '\x2', '\x231', 
		'\x233', '\x5', 'X', '-', '\x2', '\x232', '\x231', '\x3', '\x2', '\x2', 
		'\x2', '\x232', '\x233', '\x3', '\x2', '\x2', '\x2', '\x233', 'W', '\x3', 
		'\x2', '\x2', '\x2', '\x234', '\x235', '\a', '\x1A', '\x2', '\x2', '\x235', 
		'\x23A', '\x5', 'V', ',', '\x2', '\x236', '\x237', '\a', '$', '\x2', '\x2', 
		'\x237', '\x239', '\x5', 'V', ',', '\x2', '\x238', '\x236', '\x3', '\x2', 
		'\x2', '\x2', '\x239', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x23A', '\x238', 
		'\x3', '\x2', '\x2', '\x2', '\x23A', '\x23B', '\x3', '\x2', '\x2', '\x2', 
		'\x23B', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x23A', '\x3', 
		'\x2', '\x2', '\x2', '\x23D', '\x23E', '\a', '\x1B', '\x2', '\x2', '\x23E', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x241', '\t', '\x2', '\x2', 
		'\x2', '\x240', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x240', '\x241', 
		'\x3', '\x2', '\x2', '\x2', '\x241', '\x243', '\x3', '\x2', '\x2', '\x2', 
		'\x242', '\x244', '\a', '\t', '\x2', '\x2', '\x243', '\x242', '\x3', '\x2', 
		'\x2', '\x2', '\x243', '\x244', '\x3', '\x2', '\x2', '\x2', '\x244', '[', 
		'\x3', '\x2', '\x2', '\x2', '\x245', '\x246', '\a', '\b', '\x2', '\x2', 
		'\x246', ']', '\x3', '\x2', '\x2', '\x2', '\x247', '\x24D', '\x5', '`', 
		'\x31', '\x2', '\x248', '\x24D', '\a', '\x36', '\x2', '\x2', '\x249', 
		'\x24D', '\a', '\x37', '\x2', '\x2', '\x24A', '\x24D', '\a', '\x38', '\x2', 
		'\x2', '\x24B', '\x24D', '\a', ':', '\x2', '\x2', '\x24C', '\x247', '\x3', 
		'\x2', '\x2', '\x2', '\x24C', '\x248', '\x3', '\x2', '\x2', '\x2', '\x24C', 
		'\x249', '\x3', '\x2', '\x2', '\x2', '\x24C', '\x24A', '\x3', '\x2', '\x2', 
		'\x2', '\x24C', '\x24B', '\x3', '\x2', '\x2', '\x2', '\x24D', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x24E', '\x24F', '\t', '\x3', '\x2', '\x2', '\x24F', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x250', '\x251', '\a', '\x1A', '\x2', 
		'\x2', '\x251', '\x252', '\a', '\x1A', '\x2', '\x2', '\x252', '\x253', 
		'\x6', '\x32', '\x18', '\x3', '\x253', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x254', '\x255', '\a', '\x1B', '\x2', '\x2', '\x255', '\x256', '\a', 
		'\x1B', '\x2', '\x2', '\x256', '\x257', '\x6', '\x33', '\x19', '\x3', 
		'\x257', '\x65', '\x3', '\x2', '\x2', '\x2', 'G', 'j', 'p', '|', '\x86', 
		'\x8C', '\x92', '\x97', '\x9C', '\xA2', '\xAD', '\xB3', '\xBE', '\xC2', 
		'\xC6', '\xCC', '\xD7', '\xE1', '\xE5', '\xEF', '\xF2', '\xF7', '\x102', 
		'\x106', '\x10A', '\x111', '\x114', '\x117', '\x11F', '\x124', '\x12E', 
		'\x139', '\x144', '\x14F', '\x15A', '\x166', '\x168', '\x179', '\x17B', 
		'\x186', '\x194', '\x196', '\x1A2', '\x1A4', '\x1B3', '\x1B5', '\x1C4', 
		'\x1C8', '\x1D0', '\x1D4', '\x1D9', '\x1E1', '\x1E4', '\x1E6', '\x1EA', 
		'\x1EE', '\x1F6', '\x1F8', '\x1FF', '\x203', '\x206', '\x212', '\x21E', 
		'\x222', '\x227', '\x232', '\x23A', '\x240', '\x243', '\x24C',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Oxide.Compiler.Parser
