//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/chand/Projects/Oxide/bootstrap/Oxide.Compiler\Oxide.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Oxide.Compiler.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class OxideParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, COMMENT=2, LINE_COMMENT=3, PACKAGE=4, IMPORT=5, PUBLIC=6, PRIVATE=7, 
		EXTERN=8, MUT=9, STRUCT=10, ENUM=11, VARIANT=12, IMPL=13, IFACE=14, WHERE=15, 
		FOR=16, VAR=17, FUNC=18, UNSAFE=19, ALIAS=20, REF=21, WEAK=22, DERIVED=23, 
		THIS_FIELD=24, THIS_TYPE=25, RETURN=26, IF=27, ELSE=28, WHILE=29, LBRACK=30, 
		RBRACK=31, LARROW=32, RARROW=33, LBRACE=34, RBRACE=35, COLON=36, DCOLON=37, 
		SEMI=38, ARROW=39, AMP=40, PERIOD=41, COMMA=42, PLUS=43, PLUSEQL=44, MINUS=45, 
		MINUSEQL=46, EQUAL=47, NOTEQ=48, EQUALTO=49, STAR=50, DIV=51, MOD=52, 
		NOT=53, AS=54, OR_OP=55, AND_OP=56, INC_OR_OP=57, EX_OR_OP=58, LEQ_OP=59, 
		GEQ_OP=60, TRUE=61, FALSE=62, IDENTIFIER=63, INT_NUMBER=64, HEX_NUMBER=65, 
		BINARY_NUMBER=66, CHAR_LITERAL=67, STRING_LITERAL=68;
	public const int
		RULE_compilation_unit = 0, RULE_package = 1, RULE_qualified_name = 2, 
		RULE_qualified_name_part = 3, RULE_top_level = 4, RULE_import_stmt = 5, 
		RULE_struct_def = 6, RULE_generic_def = 7, RULE_field_def = 8, RULE_enum_def = 9, 
		RULE_enum_item_def = 10, RULE_variant_def = 11, RULE_variant_item_def = 12, 
		RULE_tuple_def = 13, RULE_tuple_item_def = 14, RULE_impl_stmt = 15, RULE_impl_body = 16, 
		RULE_where = 17, RULE_where_clause = 18, RULE_iface_def = 19, RULE_alias_def = 20, 
		RULE_func_def = 21, RULE_parameter = 22, RULE_func_body = 23, RULE_block = 24, 
		RULE_statement = 25, RULE_assign_statement = 26, RULE_assign_op = 27, 
		RULE_assign_target = 28, RULE_loop_statement = 29, RULE_expression = 30, 
		RULE_or_expression = 31, RULE_and_expression = 32, RULE_inc_or_expression = 33, 
		RULE_ex_or_expression = 34, RULE_bit_and_expression = 35, RULE_equal_expression = 36, 
		RULE_comparison_expression = 37, RULE_cast_expression = 38, RULE_shift_expression = 39, 
		RULE_add_expression = 40, RULE_multiply_expression = 41, RULE_unary_expression = 42, 
		RULE_base_expression = 43, RULE_block_expression = 44, RULE_if_expression = 45, 
		RULE_if_condition = 46, RULE_if_var_values = 47, RULE_arguments = 48, 
		RULE_argument = 49, RULE_label = 50, RULE_struct_initialiser = 51, RULE_field_initialiser = 52, 
		RULE_variable_statement = 53, RULE_name = 54, RULE_type = 55, RULE_direct_type = 56, 
		RULE_type_generic_params = 57, RULE_type_flags = 58, RULE_visibility = 59, 
		RULE_literal = 60, RULE_boolean_literal = 61, RULE_left_shift = 62, RULE_right_shift = 63;
	public static readonly string[] ruleNames = {
		"compilation_unit", "package", "qualified_name", "qualified_name_part", 
		"top_level", "import_stmt", "struct_def", "generic_def", "field_def", 
		"enum_def", "enum_item_def", "variant_def", "variant_item_def", "tuple_def", 
		"tuple_item_def", "impl_stmt", "impl_body", "where", "where_clause", "iface_def", 
		"alias_def", "func_def", "parameter", "func_body", "block", "statement", 
		"assign_statement", "assign_op", "assign_target", "loop_statement", "expression", 
		"or_expression", "and_expression", "inc_or_expression", "ex_or_expression", 
		"bit_and_expression", "equal_expression", "comparison_expression", "cast_expression", 
		"shift_expression", "add_expression", "multiply_expression", "unary_expression", 
		"base_expression", "block_expression", "if_expression", "if_condition", 
		"if_var_values", "arguments", "argument", "label", "struct_initialiser", 
		"field_initialiser", "variable_statement", "name", "type", "direct_type", 
		"type_generic_params", "type_flags", "visibility", "literal", "boolean_literal", 
		"left_shift", "right_shift"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'package'", "'import'", "'public'", "'private'", 
		"'extern'", "'mut'", "'struct'", "'enum'", "'variant'", "'impl'", "'interface'", 
		"'where'", "'for'", "'var'", "'func'", "'unsafe'", "'alias'", "'ref'", 
		"'weak'", "'~'", "'this'", "'This'", "'return'", "'if'", "'else'", "'while'", 
		"'('", "')'", "'<'", "'>'", "'{'", "'}'", "':'", "'::'", "';'", "'->'", 
		"'&'", "'.'", "','", "'+'", "'+='", "'-'", "'-='", "'='", "'!='", "'=='", 
		"'*'", "'/'", "'%'", "'!'", "'as'", "'||'", "'&&'", "'|'", "'^'", "'<='", 
		"'>='", "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "COMMENT", "LINE_COMMENT", "PACKAGE", "IMPORT", "PUBLIC", 
		"PRIVATE", "EXTERN", "MUT", "STRUCT", "ENUM", "VARIANT", "IMPL", "IFACE", 
		"WHERE", "FOR", "VAR", "FUNC", "UNSAFE", "ALIAS", "REF", "WEAK", "DERIVED", 
		"THIS_FIELD", "THIS_TYPE", "RETURN", "IF", "ELSE", "WHILE", "LBRACK", 
		"RBRACK", "LARROW", "RARROW", "LBRACE", "RBRACE", "COLON", "DCOLON", "SEMI", 
		"ARROW", "AMP", "PERIOD", "COMMA", "PLUS", "PLUSEQL", "MINUS", "MINUSEQL", 
		"EQUAL", "NOTEQ", "EQUALTO", "STAR", "DIV", "MOD", "NOT", "AS", "OR_OP", 
		"AND_OP", "INC_OR_OP", "EX_OR_OP", "LEQ_OP", "GEQ_OP", "TRUE", "FALSE", 
		"IDENTIFIER", "INT_NUMBER", "HEX_NUMBER", "BINARY_NUMBER", "CHAR_LITERAL", 
		"STRING_LITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Oxide.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static OxideParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public OxideParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public OxideParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PackageContext package() {
			return GetRuleContext<PackageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(OxideParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Import_stmtContext[] import_stmt() {
			return GetRuleContexts<Import_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_stmtContext import_stmt(int i) {
			return GetRuleContext<Import_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_levelContext[] top_level() {
			return GetRuleContexts<Top_levelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_levelContext top_level(int i) {
			return GetRuleContext<Top_levelContext>(i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			package();
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 129;
				import_stmt();
				}
				}
				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUBLIC) | (1L << PRIVATE) | (1L << EXTERN) | (1L << STRUCT) | (1L << ENUM) | (1L << VARIANT) | (1L << IMPL) | (1L << IFACE) | (1L << FUNC) | (1L << ALIAS))) != 0)) {
				{
				{
				State = 135;
				top_level();
				}
				}
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 141;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(OxideParser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(OxideParser.SEMI, 0); }
		public PackageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package; } }
	}

	[RuleVersion(0)]
	public PackageContext package() {
		PackageContext _localctx = new PackageContext(Context, State);
		EnterRule(_localctx, 2, RULE_package);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			Match(PACKAGE);
			State = 144;
			qualified_name();
			State = 145;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_nameContext : ParserRuleContext {
		public Qualified_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_name; } }
	 
		public Qualified_nameContext() { }
		public virtual void CopyFrom(Qualified_nameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Relative_qualified_nameContext : Qualified_nameContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_name_partContext qualified_name_part() {
			return GetRuleContext<Qualified_name_partContext>(0);
		}
		public Relative_qualified_nameContext(Qualified_nameContext context) { CopyFrom(context); }
	}
	public partial class Absolute_qualified_nameContext : Qualified_nameContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCOLON() { return GetToken(OxideParser.DCOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_name_partContext qualified_name_part() {
			return GetRuleContext<Qualified_name_partContext>(0);
		}
		public Absolute_qualified_nameContext(Qualified_nameContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Qualified_nameContext qualified_name() {
		Qualified_nameContext _localctx = new Qualified_nameContext(Context, State);
		EnterRule(_localctx, 4, RULE_qualified_name);
		try {
			State = 150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				_localctx = new Relative_qualified_nameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 147;
				qualified_name_part(0);
				}
				break;
			case DCOLON:
				_localctx = new Absolute_qualified_nameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 148;
				Match(DCOLON);
				State = 149;
				qualified_name_part(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_name_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(OxideParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_name_partContext qualified_name_part() {
			return GetRuleContext<Qualified_name_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCOLON() { return GetToken(OxideParser.DCOLON, 0); }
		public Qualified_name_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_name_part; } }
	}

	[RuleVersion(0)]
	public Qualified_name_partContext qualified_name_part() {
		return qualified_name_part(0);
	}

	private Qualified_name_partContext qualified_name_part(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Qualified_name_partContext _localctx = new Qualified_name_partContext(Context, _parentState);
		Qualified_name_partContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_qualified_name_part, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 153;
			Match(IDENTIFIER);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 160;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Qualified_name_partContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_qualified_name_part);
					State = 155;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 156;
					Match(DCOLON);
					State = 157;
					Match(IDENTIFIER);
					}
					} 
				}
				State = 162;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Top_levelContext : ParserRuleContext {
		public Top_levelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level; } }
	 
		public Top_levelContext() { }
		public virtual void CopyFrom(Top_levelContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Alias_top_levelContext : Top_levelContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alias_defContext alias_def() {
			return GetRuleContext<Alias_defContext>(0);
		}
		public Alias_top_levelContext(Top_levelContext context) { CopyFrom(context); }
	}
	public partial class Variant_top_levelContext : Top_levelContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variant_defContext variant_def() {
			return GetRuleContext<Variant_defContext>(0);
		}
		public Variant_top_levelContext(Top_levelContext context) { CopyFrom(context); }
	}
	public partial class Enum_top_levelContext : Top_levelContext {
		[System.Diagnostics.DebuggerNonUserCode] public Enum_defContext enum_def() {
			return GetRuleContext<Enum_defContext>(0);
		}
		public Enum_top_levelContext(Top_levelContext context) { CopyFrom(context); }
	}
	public partial class Impl_top_levelContext : Top_levelContext {
		[System.Diagnostics.DebuggerNonUserCode] public Impl_stmtContext impl_stmt() {
			return GetRuleContext<Impl_stmtContext>(0);
		}
		public Impl_top_levelContext(Top_levelContext context) { CopyFrom(context); }
	}
	public partial class Struct_top_levelContext : Top_levelContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_defContext struct_def() {
			return GetRuleContext<Struct_defContext>(0);
		}
		public Struct_top_levelContext(Top_levelContext context) { CopyFrom(context); }
	}
	public partial class Func_top_levelContext : Top_levelContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_defContext func_def() {
			return GetRuleContext<Func_defContext>(0);
		}
		public Func_top_levelContext(Top_levelContext context) { CopyFrom(context); }
	}
	public partial class Iface_top_levelContext : Top_levelContext {
		[System.Diagnostics.DebuggerNonUserCode] public Iface_defContext iface_def() {
			return GetRuleContext<Iface_defContext>(0);
		}
		public Iface_top_levelContext(Top_levelContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Top_levelContext top_level() {
		Top_levelContext _localctx = new Top_levelContext(Context, State);
		EnterRule(_localctx, 8, RULE_top_level);
		try {
			State = 170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new Struct_top_levelContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 163;
				struct_def();
				}
				break;
			case 2:
				_localctx = new Variant_top_levelContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 164;
				variant_def();
				}
				break;
			case 3:
				_localctx = new Impl_top_levelContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 165;
				impl_stmt();
				}
				break;
			case 4:
				_localctx = new Func_top_levelContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 166;
				func_def();
				}
				break;
			case 5:
				_localctx = new Iface_top_levelContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 167;
				iface_def();
				}
				break;
			case 6:
				_localctx = new Alias_top_levelContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 168;
				alias_def();
				}
				break;
			case 7:
				_localctx = new Enum_top_levelContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 169;
				enum_def();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(OxideParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(OxideParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(OxideParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Import_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_stmt; } }
	}

	[RuleVersion(0)]
	public Import_stmtContext import_stmt() {
		Import_stmtContext _localctx = new Import_stmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_import_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(IMPORT);
			State = 173;
			qualified_name();
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 174;
				Match(AS);
				State = 175;
				name();
				}
			}

			State = 178;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(OxideParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(OxideParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(OxideParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_defContext generic_def() {
			return GetRuleContext<Generic_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_defContext[] field_def() {
			return GetRuleContexts<Field_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_defContext field_def(int i) {
			return GetRuleContext<Field_defContext>(i);
		}
		public Struct_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_def; } }
	}

	[RuleVersion(0)]
	public Struct_defContext struct_def() {
		Struct_defContext _localctx = new Struct_defContext(Context, State);
		EnterRule(_localctx, 12, RULE_struct_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUBLIC || _la==PRIVATE) {
				{
				State = 180;
				visibility();
				}
			}

			State = 183;
			Match(STRUCT);
			State = 184;
			name();
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LARROW) {
				{
				State = 185;
				generic_def();
				}
			}

			State = 188;
			Match(LBRACE);
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUBLIC) | (1L << PRIVATE) | (1L << MUT) | (1L << UNSAFE) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 189;
				field_def();
				}
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 195;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARROW() { return GetToken(OxideParser.LARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(OxideParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(OxideParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(OxideParser.COMMA, i);
		}
		public Generic_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_def; } }
	}

	[RuleVersion(0)]
	public Generic_defContext generic_def() {
		Generic_defContext _localctx = new Generic_defContext(Context, State);
		EnterRule(_localctx, 14, RULE_generic_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(LARROW);
			State = 198;
			name();
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 199;
				Match(COMMA);
				State = 200;
				name();
				}
				}
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 206;
			Match(RARROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(OxideParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(OxideParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSAFE() { return GetToken(OxideParser.UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUT() { return GetToken(OxideParser.MUT, 0); }
		public Field_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_def; } }
	}

	[RuleVersion(0)]
	public Field_defContext field_def() {
		Field_defContext _localctx = new Field_defContext(Context, State);
		EnterRule(_localctx, 16, RULE_field_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUBLIC || _la==PRIVATE) {
				{
				State = 208;
				visibility();
				}
			}

			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNSAFE) {
				{
				State = 211;
				Match(UNSAFE);
				}
			}

			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MUT) {
				{
				State = 214;
				Match(MUT);
				}
			}

			State = 217;
			name();
			State = 218;
			Match(COLON);
			State = 219;
			type();
			State = 220;
			Match(COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_defContext : ParserRuleContext {
		public Qualified_nameContext base_type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(OxideParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(OxideParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(OxideParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(OxideParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_item_defContext[] enum_item_def() {
			return GetRuleContexts<Enum_item_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_item_defContext enum_item_def(int i) {
			return GetRuleContext<Enum_item_defContext>(i);
		}
		public Enum_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_def; } }
	}

	[RuleVersion(0)]
	public Enum_defContext enum_def() {
		Enum_defContext _localctx = new Enum_defContext(Context, State);
		EnterRule(_localctx, 18, RULE_enum_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUBLIC || _la==PRIVATE) {
				{
				State = 222;
				visibility();
				}
			}

			State = 225;
			Match(ENUM);
			State = 226;
			name();
			State = 227;
			Match(COLON);
			State = 228;
			_localctx.base_type = qualified_name();
			State = 229;
			Match(LBRACE);
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 230;
				enum_item_def();
				}
				}
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 236;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_item_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(OxideParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(OxideParser.COMMA, 0); }
		public Enum_item_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_item_def; } }
	}

	[RuleVersion(0)]
	public Enum_item_defContext enum_item_def() {
		Enum_item_defContext _localctx = new Enum_item_defContext(Context, State);
		EnterRule(_localctx, 20, RULE_enum_item_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			name();
			State = 239;
			Match(EQUAL);
			State = 240;
			literal();
			State = 241;
			Match(COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANT() { return GetToken(OxideParser.VARIANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(OxideParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(OxideParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_defContext generic_def() {
			return GetRuleContext<Generic_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variant_item_defContext[] variant_item_def() {
			return GetRuleContexts<Variant_item_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variant_item_defContext variant_item_def(int i) {
			return GetRuleContext<Variant_item_defContext>(i);
		}
		public Variant_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_def; } }
	}

	[RuleVersion(0)]
	public Variant_defContext variant_def() {
		Variant_defContext _localctx = new Variant_defContext(Context, State);
		EnterRule(_localctx, 22, RULE_variant_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUBLIC || _la==PRIVATE) {
				{
				State = 243;
				visibility();
				}
			}

			State = 246;
			Match(VARIANT);
			State = 247;
			name();
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LARROW) {
				{
				State = 248;
				generic_def();
				}
			}

			State = 251;
			Match(LBRACE);
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUBLIC) | (1L << PRIVATE) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 252;
				variant_item_def();
				}
				}
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 258;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_item_defContext : ParserRuleContext {
		public Variant_item_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_item_def; } }
	 
		public Variant_item_defContext() { }
		public virtual void CopyFrom(Variant_item_defContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Tuple_variant_item_defContext : Variant_item_defContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tuple_defContext tuple_def() {
			return GetRuleContext<Tuple_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(OxideParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public Tuple_variant_item_defContext(Variant_item_defContext context) { CopyFrom(context); }
	}
	public partial class Simple_variant_item_defContext : Variant_item_defContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(OxideParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public Simple_variant_item_defContext(Variant_item_defContext context) { CopyFrom(context); }
	}
	public partial class Struct_variant_item_defContext : Variant_item_defContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(OxideParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(OxideParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(OxideParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_defContext[] field_def() {
			return GetRuleContexts<Field_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_defContext field_def(int i) {
			return GetRuleContext<Field_defContext>(i);
		}
		public Struct_variant_item_defContext(Variant_item_defContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Variant_item_defContext variant_item_def() {
		Variant_item_defContext _localctx = new Variant_item_defContext(Context, State);
		EnterRule(_localctx, 24, RULE_variant_item_def);
		int _la;
		try {
			State = 287;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				_localctx = new Simple_variant_item_defContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PUBLIC || _la==PRIVATE) {
					{
					State = 260;
					visibility();
					}
				}

				State = 263;
				name();
				State = 264;
				Match(COMMA);
				}
				break;
			case 2:
				_localctx = new Struct_variant_item_defContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PUBLIC || _la==PRIVATE) {
					{
					State = 266;
					visibility();
					}
				}

				State = 269;
				name();
				State = 270;
				Match(LBRACE);
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUBLIC) | (1L << PRIVATE) | (1L << MUT) | (1L << UNSAFE) | (1L << IDENTIFIER))) != 0)) {
					{
					{
					State = 271;
					field_def();
					}
					}
					State = 276;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 277;
				Match(RBRACE);
				State = 278;
				Match(COMMA);
				}
				break;
			case 3:
				_localctx = new Tuple_variant_item_defContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PUBLIC || _la==PRIVATE) {
					{
					State = 280;
					visibility();
					}
				}

				State = 283;
				name();
				State = 284;
				tuple_def();
				State = 285;
				Match(COMMA);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tuple_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(OxideParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Tuple_item_defContext[] tuple_item_def() {
			return GetRuleContexts<Tuple_item_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tuple_item_defContext tuple_item_def(int i) {
			return GetRuleContext<Tuple_item_defContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(OxideParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(OxideParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(OxideParser.COMMA, i);
		}
		public Tuple_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple_def; } }
	}

	[RuleVersion(0)]
	public Tuple_defContext tuple_def() {
		Tuple_defContext _localctx = new Tuple_defContext(Context, State);
		EnterRule(_localctx, 26, RULE_tuple_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(LBRACK);
			State = 290;
			tuple_item_def();
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 291;
				Match(COMMA);
				State = 292;
				tuple_item_def();
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 298;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tuple_item_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSAFE() { return GetToken(OxideParser.UNSAFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUT() { return GetToken(OxideParser.MUT, 0); }
		public Tuple_item_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple_item_def; } }
	}

	[RuleVersion(0)]
	public Tuple_item_defContext tuple_item_def() {
		Tuple_item_defContext _localctx = new Tuple_item_defContext(Context, State);
		EnterRule(_localctx, 28, RULE_tuple_item_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNSAFE) {
				{
				State = 300;
				Match(UNSAFE);
				}
			}

			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MUT) {
				{
				State = 303;
				Match(MUT);
				}
			}

			State = 306;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Impl_stmtContext : ParserRuleContext {
		public Generic_defContext impl_generics;
		public Qualified_nameContext iface_name;
		public Type_generic_paramsContext iface_generics;
		public Qualified_nameContext tgt_name;
		public Type_generic_paramsContext tgt_generics;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPL() { return GetToken(OxideParser.IMPL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext[] qualified_name() {
			return GetRuleContexts<Qualified_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name(int i) {
			return GetRuleContext<Qualified_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(OxideParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Impl_bodyContext impl_body() {
			return GetRuleContext<Impl_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(OxideParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_defContext generic_def() {
			return GetRuleContext<Generic_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_generic_paramsContext[] type_generic_params() {
			return GetRuleContexts<Type_generic_paramsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_generic_paramsContext type_generic_params(int i) {
			return GetRuleContext<Type_generic_paramsContext>(i);
		}
		public Impl_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_impl_stmt; } }
	}

	[RuleVersion(0)]
	public Impl_stmtContext impl_stmt() {
		Impl_stmtContext _localctx = new Impl_stmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_impl_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			Match(IMPL);
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LARROW) {
				{
				State = 309;
				_localctx.impl_generics = generic_def();
				}
			}

			State = 318;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 312;
				_localctx.iface_name = qualified_name();
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LARROW) {
					{
					State = 313;
					_localctx.iface_generics = type_generic_params();
					}
				}

				State = 316;
				Match(FOR);
				}
				break;
			}
			State = 320;
			_localctx.tgt_name = qualified_name();
			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LARROW) {
				{
				State = 321;
				_localctx.tgt_generics = type_generic_params();
				}
			}

			State = 325;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 324;
				where();
				}
			}

			State = 329;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
				{
				State = 327;
				Match(SEMI);
				}
				break;
			case LBRACE:
				{
				State = 328;
				impl_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Impl_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(OxideParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(OxideParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_defContext[] func_def() {
			return GetRuleContexts<Func_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_defContext func_def(int i) {
			return GetRuleContext<Func_defContext>(i);
		}
		public Impl_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_impl_body; } }
	}

	[RuleVersion(0)]
	public Impl_bodyContext impl_body() {
		Impl_bodyContext _localctx = new Impl_bodyContext(Context, State);
		EnterRule(_localctx, 32, RULE_impl_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			Match(LBRACE);
			State = 335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUBLIC) | (1L << PRIVATE) | (1L << EXTERN) | (1L << FUNC))) != 0)) {
				{
				{
				State = 332;
				func_def();
				}
				}
				State = 337;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 338;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(OxideParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext[] where_clause() {
			return GetRuleContexts<Where_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause(int i) {
			return GetRuleContext<Where_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(OxideParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(OxideParser.COMMA, i);
		}
		public WhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where; } }
	}

	[RuleVersion(0)]
	public WhereContext where() {
		WhereContext _localctx = new WhereContext(Context, State);
		EnterRule(_localctx, 34, RULE_where);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			Match(WHERE);
			State = 341;
			where_clause();
			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 342;
				Match(COMMA);
				State = 343;
				where_clause();
				}
				}
				State = 348;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(OxideParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(OxideParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(OxideParser.PLUS, i);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 36, RULE_where_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			name();
			State = 350;
			Match(COLON);
			State = 351;
			type();
			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS) {
				{
				{
				State = 352;
				Match(PLUS);
				State = 353;
				type();
				}
				}
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iface_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFACE() { return GetToken(OxideParser.IFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(OxideParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(OxideParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_defContext generic_def() {
			return GetRuleContext<Generic_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_defContext[] func_def() {
			return GetRuleContexts<Func_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_defContext func_def(int i) {
			return GetRuleContext<Func_defContext>(i);
		}
		public Iface_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iface_def; } }
	}

	[RuleVersion(0)]
	public Iface_defContext iface_def() {
		Iface_defContext _localctx = new Iface_defContext(Context, State);
		EnterRule(_localctx, 38, RULE_iface_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUBLIC || _la==PRIVATE) {
				{
				State = 359;
				visibility();
				}
			}

			State = 362;
			Match(IFACE);
			State = 363;
			name();
			State = 365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LARROW) {
				{
				State = 364;
				generic_def();
				}
			}

			State = 367;
			Match(LBRACE);
			State = 371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUBLIC) | (1L << PRIVATE) | (1L << EXTERN) | (1L << FUNC))) != 0)) {
				{
				{
				State = 368;
				func_def();
				}
				}
				State = 373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 374;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(OxideParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(OxideParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(OxideParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_defContext generic_def() {
			return GetRuleContext<Generic_defContext>(0);
		}
		public Alias_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_def; } }
	}

	[RuleVersion(0)]
	public Alias_defContext alias_def() {
		Alias_defContext _localctx = new Alias_defContext(Context, State);
		EnterRule(_localctx, 40, RULE_alias_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUBLIC || _la==PRIVATE) {
				{
				State = 376;
				visibility();
				}
			}

			State = 379;
			Match(ALIAS);
			State = 380;
			name();
			State = 382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LARROW) {
				{
				State = 381;
				generic_def();
				}
			}

			State = 384;
			Match(EQUAL);
			State = 385;
			type();
			State = 386;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(OxideParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(OxideParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(OxideParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Func_bodyContext func_body() {
			return GetRuleContext<Func_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERN() { return GetToken(OxideParser.EXTERN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_defContext generic_def() {
			return GetRuleContext<Generic_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(OxideParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(OxideParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(OxideParser.COMMA, i);
		}
		public Func_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_def; } }
	}

	[RuleVersion(0)]
	public Func_defContext func_def() {
		Func_defContext _localctx = new Func_defContext(Context, State);
		EnterRule(_localctx, 42, RULE_func_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUBLIC || _la==PRIVATE) {
				{
				State = 388;
				visibility();
				}
			}

			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTERN) {
				{
				State = 391;
				Match(EXTERN);
				}
			}

			State = 394;
			Match(FUNC);
			State = 395;
			name();
			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LARROW) {
				{
				State = 396;
				generic_def();
				}
			}

			State = 399;
			Match(LBRACK);
			State = 408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << REF) | (1L << WEAK) | (1L << DERIVED) | (1L << THIS_FIELD) | (1L << AMP) | (1L << STAR) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 400;
				parameter();
				State = 405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 401;
					Match(COMMA);
					State = 402;
					parameter();
					}
					}
					State = 407;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 410;
			Match(RBRACK);
			State = 413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 411;
				Match(COLON);
				State = 412;
				type();
				}
			}

			State = 415;
			func_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
	 
		public ParameterContext() { }
		public virtual void CopyFrom(ParameterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Standard_parameterContext : ParameterContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(OxideParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Standard_parameterContext(ParameterContext context) { CopyFrom(context); }
	}
	public partial class This_parameterContext : ParameterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS_FIELD() { return GetToken(OxideParser.THIS_FIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_flagsContext type_flags() {
			return GetRuleContext<Type_flagsContext>(0);
		}
		public This_parameterContext(ParameterContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 44, RULE_parameter);
		int _la;
		try {
			State = 425;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				_localctx = new Standard_parameterContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 417;
				name();
				State = 418;
				Match(COLON);
				State = 419;
				type();
				}
				break;
			case REF:
			case WEAK:
			case DERIVED:
			case THIS_FIELD:
			case AMP:
			case STAR:
				_localctx = new This_parameterContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << REF) | (1L << WEAK) | (1L << DERIVED) | (1L << AMP) | (1L << STAR))) != 0)) {
					{
					State = 421;
					type_flags();
					}
				}

				State = 424;
				Match(THIS_FIELD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_bodyContext : ParserRuleContext {
		public Func_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_body; } }
	 
		public Func_bodyContext() { }
		public virtual void CopyFrom(Func_bodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Block_func_bodyContext : Func_bodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Block_func_bodyContext(Func_bodyContext context) { CopyFrom(context); }
	}
	public partial class Empty_func_bodyContext : Func_bodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(OxideParser.SEMI, 0); }
		public Empty_func_bodyContext(Func_bodyContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Func_bodyContext func_body() {
		Func_bodyContext _localctx = new Func_bodyContext(Context, State);
		EnterRule(_localctx, 46, RULE_func_body);
		try {
			State = 429;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				_localctx = new Block_func_bodyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 427;
				block();
				}
				break;
			case SEMI:
				_localctx = new Empty_func_bodyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 428;
				Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(OxideParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(OxideParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 48, RULE_block);
		int _la;
		try {
			int _alt;
			State = 449;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 431;
				Match(LBRACE);
				State = 435;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 432;
						statement();
						}
						} 
					}
					State = 437;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
				}
				State = 438;
				expression();
				State = 439;
				Match(RBRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 441;
				Match(LBRACE);
				State = 445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (VAR - 17)) | (1L << (UNSAFE - 17)) | (1L << (DERIVED - 17)) | (1L << (THIS_FIELD - 17)) | (1L << (RETURN - 17)) | (1L << (IF - 17)) | (1L << (WHILE - 17)) | (1L << (LBRACK - 17)) | (1L << (LBRACE - 17)) | (1L << (DCOLON - 17)) | (1L << (SEMI - 17)) | (1L << (AMP - 17)) | (1L << (MINUS - 17)) | (1L << (STAR - 17)) | (1L << (NOT - 17)) | (1L << (TRUE - 17)) | (1L << (FALSE - 17)) | (1L << (IDENTIFIER - 17)) | (1L << (INT_NUMBER - 17)) | (1L << (HEX_NUMBER - 17)) | (1L << (BINARY_NUMBER - 17)) | (1L << (STRING_LITERAL - 17)))) != 0)) {
					{
					{
					State = 442;
					statement();
					}
					}
					State = 447;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 448;
				Match(RBRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Variable_statement_topContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_statementContext variable_statement() {
			return GetRuleContext<Variable_statementContext>(0);
		}
		public Variable_statement_topContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class Expression_statementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(OxideParser.SEMI, 0); }
		public Expression_statementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class Loop_statement_topContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Loop_statementContext loop_statement() {
			return GetRuleContext<Loop_statementContext>(0);
		}
		public Loop_statement_topContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class Block_expression_statementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Block_expressionContext block_expression() {
			return GetRuleContext<Block_expressionContext>(0);
		}
		public Block_expression_statementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class Empty_statementContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(OxideParser.SEMI, 0); }
		public Empty_statementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class Assign_statement_topContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assign_statementContext assign_statement() {
			return GetRuleContext<Assign_statementContext>(0);
		}
		public Assign_statement_topContext(StatementContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_statement);
		try {
			State = 459;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				_localctx = new Empty_statementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 451;
				Match(SEMI);
				}
				break;
			case 2:
				_localctx = new Expression_statementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 452;
				expression();
				State = 453;
				Match(SEMI);
				}
				break;
			case 3:
				_localctx = new Block_expression_statementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 455;
				block_expression();
				}
				break;
			case 4:
				_localctx = new Variable_statement_topContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 456;
				variable_statement();
				}
				break;
			case 5:
				_localctx = new Assign_statement_topContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 457;
				assign_statement();
				}
				break;
			case 6:
				_localctx = new Loop_statement_topContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 458;
				loop_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assign_targetContext assign_target() {
			return GetRuleContext<Assign_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_opContext assign_op() {
			return GetRuleContext<Assign_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(OxideParser.SEMI, 0); }
		public Assign_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_statement; } }
	}

	[RuleVersion(0)]
	public Assign_statementContext assign_statement() {
		Assign_statementContext _localctx = new Assign_statementContext(Context, State);
		EnterRule(_localctx, 52, RULE_assign_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			assign_target();
			State = 462;
			assign_op();
			State = 463;
			expression();
			State = 464;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_opContext : ParserRuleContext {
		public Assign_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_op; } }
	 
		public Assign_opContext() { }
		public virtual void CopyFrom(Assign_opContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Equal_assign_opContext : Assign_opContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(OxideParser.EQUAL, 0); }
		public Equal_assign_opContext(Assign_opContext context) { CopyFrom(context); }
	}
	public partial class Plus_assign_opContext : Assign_opContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSEQL() { return GetToken(OxideParser.PLUSEQL, 0); }
		public Plus_assign_opContext(Assign_opContext context) { CopyFrom(context); }
	}
	public partial class Minus_assign_opContext : Assign_opContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUSEQL() { return GetToken(OxideParser.MINUSEQL, 0); }
		public Minus_assign_opContext(Assign_opContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Assign_opContext assign_op() {
		Assign_opContext _localctx = new Assign_opContext(Context, State);
		EnterRule(_localctx, 54, RULE_assign_op);
		try {
			State = 469;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL:
				_localctx = new Equal_assign_opContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 466;
				Match(EQUAL);
				}
				break;
			case PLUSEQL:
				_localctx = new Plus_assign_opContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 467;
				Match(PLUSEQL);
				}
				break;
			case MINUSEQL:
				_localctx = new Minus_assign_opContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 468;
				Match(MINUSEQL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_targetContext : ParserRuleContext {
		public Assign_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_target; } }
	 
		public Assign_targetContext() { }
		public virtual void CopyFrom(Assign_targetContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Deref_assign_targetContext : Assign_targetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(OxideParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Deref_assign_targetContext(Assign_targetContext context) { CopyFrom(context); }
	}
	public partial class Field_assign_targetContext : Assign_targetContext {
		[System.Diagnostics.DebuggerNonUserCode] public Base_expressionContext base_expression() {
			return GetRuleContext<Base_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(OxideParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Field_assign_targetContext(Assign_targetContext context) { CopyFrom(context); }
	}
	public partial class Qualified_assign_targetContext : Assign_targetContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext[] qualified_name() {
			return GetRuleContexts<Qualified_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name(int i) {
			return GetRuleContext<Qualified_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_generic_paramsContext type_generic_params() {
			return GetRuleContext<Type_generic_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCOLON() { return GetToken(OxideParser.DCOLON, 0); }
		public Qualified_assign_targetContext(Assign_targetContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Assign_targetContext assign_target() {
		Assign_targetContext _localctx = new Assign_targetContext(Context, State);
		EnterRule(_localctx, 56, RULE_assign_target);
		int _la;
		try {
			State = 484;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				_localctx = new Field_assign_targetContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 471;
				base_expression(0);
				State = 472;
				Match(PERIOD);
				State = 473;
				name();
				}
				break;
			case 2:
				_localctx = new Qualified_assign_targetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 475;
				qualified_name();
				State = 480;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LARROW) {
					{
					State = 476;
					type_generic_params();
					State = 477;
					Match(DCOLON);
					State = 478;
					qualified_name();
					}
				}

				}
				break;
			case 3:
				_localctx = new Deref_assign_targetContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 482;
				Match(STAR);
				State = 483;
				unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loop_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(OxideParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_statement; } }
	}

	[RuleVersion(0)]
	public Loop_statementContext loop_statement() {
		Loop_statementContext _localctx = new Loop_statementContext(Context, State);
		EnterRule(_localctx, 58, RULE_loop_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			Match(WHILE);
			State = 487;
			expression();
			State = 488;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Return_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(OxideParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Or_expressionContext or_expression() {
			return GetRuleContext<Or_expressionContext>(0);
		}
		public Return_expressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class Pass_expressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Or_expressionContext or_expression() {
			return GetRuleContext<Or_expressionContext>(0);
		}
		public Pass_expressionContext(ExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_expression);
		try {
			State = 495;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNSAFE:
			case DERIVED:
			case THIS_FIELD:
			case IF:
			case LBRACK:
			case LBRACE:
			case DCOLON:
			case AMP:
			case MINUS:
			case STAR:
			case NOT:
			case TRUE:
			case FALSE:
			case IDENTIFIER:
			case INT_NUMBER:
			case HEX_NUMBER:
			case BINARY_NUMBER:
			case STRING_LITERAL:
				_localctx = new Pass_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 490;
				or_expression(0);
				}
				break;
			case RETURN:
				_localctx = new Return_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 491;
				Match(RETURN);
				State = 493;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
				case 1:
					{
					State = 492;
					or_expression(0);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_expressionContext : ParserRuleContext {
		public Or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_expression; } }
	 
		public Or_expressionContext() { }
		public virtual void CopyFrom(Or_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Op_or_expressionContext : Or_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Or_expressionContext or_expression() {
			return GetRuleContext<Or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_OP() { return GetToken(OxideParser.OR_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public And_expressionContext and_expression() {
			return GetRuleContext<And_expressionContext>(0);
		}
		public Op_or_expressionContext(Or_expressionContext context) { CopyFrom(context); }
	}
	public partial class Pass_or_expressionContext : Or_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public And_expressionContext and_expression() {
			return GetRuleContext<And_expressionContext>(0);
		}
		public Pass_or_expressionContext(Or_expressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Or_expressionContext or_expression() {
		return or_expression(0);
	}

	private Or_expressionContext or_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Or_expressionContext _localctx = new Or_expressionContext(Context, _parentState);
		Or_expressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_or_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Pass_or_expressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 498;
			and_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 505;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Op_or_expressionContext(new Or_expressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_or_expression);
					State = 500;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 501;
					Match(OR_OP);
					State = 502;
					and_expression(0);
					}
					} 
				}
				State = 507;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class And_expressionContext : ParserRuleContext {
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expression; } }
	 
		public And_expressionContext() { }
		public virtual void CopyFrom(And_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Op_and_expressionContext : And_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public And_expressionContext and_expression() {
			return GetRuleContext<And_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_OP() { return GetToken(OxideParser.AND_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Inc_or_expressionContext inc_or_expression() {
			return GetRuleContext<Inc_or_expressionContext>(0);
		}
		public Op_and_expressionContext(And_expressionContext context) { CopyFrom(context); }
	}
	public partial class Pass_and_expressionContext : And_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Inc_or_expressionContext inc_or_expression() {
			return GetRuleContext<Inc_or_expressionContext>(0);
		}
		public Pass_and_expressionContext(And_expressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		return and_expression(0);
	}

	private And_expressionContext and_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		And_expressionContext _localctx = new And_expressionContext(Context, _parentState);
		And_expressionContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_and_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Pass_and_expressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 509;
			inc_or_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 516;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Op_and_expressionContext(new And_expressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_and_expression);
					State = 511;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 512;
					Match(AND_OP);
					State = 513;
					inc_or_expression(0);
					}
					} 
				}
				State = 518;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Inc_or_expressionContext : ParserRuleContext {
		public Inc_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inc_or_expression; } }
	 
		public Inc_or_expressionContext() { }
		public virtual void CopyFrom(Inc_or_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Op_inc_or_expressionContext : Inc_or_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Inc_or_expressionContext inc_or_expression() {
			return GetRuleContext<Inc_or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INC_OR_OP() { return GetToken(OxideParser.INC_OR_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ex_or_expressionContext ex_or_expression() {
			return GetRuleContext<Ex_or_expressionContext>(0);
		}
		public Op_inc_or_expressionContext(Inc_or_expressionContext context) { CopyFrom(context); }
	}
	public partial class Pass_inc_or_expressionContext : Inc_or_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ex_or_expressionContext ex_or_expression() {
			return GetRuleContext<Ex_or_expressionContext>(0);
		}
		public Pass_inc_or_expressionContext(Inc_or_expressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Inc_or_expressionContext inc_or_expression() {
		return inc_or_expression(0);
	}

	private Inc_or_expressionContext inc_or_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Inc_or_expressionContext _localctx = new Inc_or_expressionContext(Context, _parentState);
		Inc_or_expressionContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_inc_or_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Pass_inc_or_expressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 520;
			ex_or_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 527;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Op_inc_or_expressionContext(new Inc_or_expressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_inc_or_expression);
					State = 522;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 523;
					Match(INC_OR_OP);
					State = 524;
					ex_or_expression(0);
					}
					} 
				}
				State = 529;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Ex_or_expressionContext : ParserRuleContext {
		public Ex_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ex_or_expression; } }
	 
		public Ex_or_expressionContext() { }
		public virtual void CopyFrom(Ex_or_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Op_ex_or_expressionContext : Ex_or_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ex_or_expressionContext ex_or_expression() {
			return GetRuleContext<Ex_or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EX_OR_OP() { return GetToken(OxideParser.EX_OR_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bit_and_expressionContext bit_and_expression() {
			return GetRuleContext<Bit_and_expressionContext>(0);
		}
		public Op_ex_or_expressionContext(Ex_or_expressionContext context) { CopyFrom(context); }
	}
	public partial class Pass_ex_or_expressionContext : Ex_or_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bit_and_expressionContext bit_and_expression() {
			return GetRuleContext<Bit_and_expressionContext>(0);
		}
		public Pass_ex_or_expressionContext(Ex_or_expressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Ex_or_expressionContext ex_or_expression() {
		return ex_or_expression(0);
	}

	private Ex_or_expressionContext ex_or_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Ex_or_expressionContext _localctx = new Ex_or_expressionContext(Context, _parentState);
		Ex_or_expressionContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_ex_or_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Pass_ex_or_expressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 531;
			bit_and_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 538;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Op_ex_or_expressionContext(new Ex_or_expressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_ex_or_expression);
					State = 533;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 534;
					Match(EX_OR_OP);
					State = 535;
					bit_and_expression(0);
					}
					} 
				}
				State = 540;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Bit_and_expressionContext : ParserRuleContext {
		public Bit_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bit_and_expression; } }
	 
		public Bit_and_expressionContext() { }
		public virtual void CopyFrom(Bit_and_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pass_bit_and_expressionContext : Bit_and_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Equal_expressionContext equal_expression() {
			return GetRuleContext<Equal_expressionContext>(0);
		}
		public Pass_bit_and_expressionContext(Bit_and_expressionContext context) { CopyFrom(context); }
	}
	public partial class Op_bit_and_expressionContext : Bit_and_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bit_and_expressionContext bit_and_expression() {
			return GetRuleContext<Bit_and_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(OxideParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Equal_expressionContext equal_expression() {
			return GetRuleContext<Equal_expressionContext>(0);
		}
		public Op_bit_and_expressionContext(Bit_and_expressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Bit_and_expressionContext bit_and_expression() {
		return bit_and_expression(0);
	}

	private Bit_and_expressionContext bit_and_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bit_and_expressionContext _localctx = new Bit_and_expressionContext(Context, _parentState);
		Bit_and_expressionContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_bit_and_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Pass_bit_and_expressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 542;
			equal_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 549;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Op_bit_and_expressionContext(new Bit_and_expressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_bit_and_expression);
					State = 544;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 545;
					Match(AMP);
					State = 546;
					equal_expression(0);
					}
					} 
				}
				State = 551;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Equal_expressionContext : ParserRuleContext {
		public Equal_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equal_expression; } }
	 
		public Equal_expressionContext() { }
		public virtual void CopyFrom(Equal_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Ne_equal_expressionContext : Equal_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Equal_expressionContext equal_expression() {
			return GetRuleContext<Equal_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQ() { return GetToken(OxideParser.NOTEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public Ne_equal_expressionContext(Equal_expressionContext context) { CopyFrom(context); }
	}
	public partial class Eq_equal_expressionContext : Equal_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Equal_expressionContext equal_expression() {
			return GetRuleContext<Equal_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALTO() { return GetToken(OxideParser.EQUALTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public Eq_equal_expressionContext(Equal_expressionContext context) { CopyFrom(context); }
	}
	public partial class Pass_equal_expressionContext : Equal_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public Pass_equal_expressionContext(Equal_expressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Equal_expressionContext equal_expression() {
		return equal_expression(0);
	}

	private Equal_expressionContext equal_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Equal_expressionContext _localctx = new Equal_expressionContext(Context, _parentState);
		Equal_expressionContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_equal_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Pass_equal_expressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 553;
			comparison_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 563;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 561;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
					case 1:
						{
						_localctx = new Eq_equal_expressionContext(new Equal_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_equal_expression);
						State = 555;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 556;
						Match(EQUALTO);
						State = 557;
						comparison_expression(0);
						}
						break;
					case 2:
						{
						_localctx = new Ne_equal_expressionContext(new Equal_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_equal_expression);
						State = 558;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 559;
						Match(NOTEQ);
						State = 560;
						comparison_expression(0);
						}
						break;
					}
					} 
				}
				State = 565;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Comparison_expressionContext : ParserRuleContext {
		public Comparison_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_expression; } }
	 
		public Comparison_expressionContext() { }
		public virtual void CopyFrom(Comparison_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Gt_comparison_expressionContext : Comparison_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(OxideParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public Gt_comparison_expressionContext(Comparison_expressionContext context) { CopyFrom(context); }
	}
	public partial class Geq_comparison_expressionContext : Comparison_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEQ_OP() { return GetToken(OxideParser.GEQ_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public Geq_comparison_expressionContext(Comparison_expressionContext context) { CopyFrom(context); }
	}
	public partial class Leq_comparison_expressionContext : Comparison_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEQ_OP() { return GetToken(OxideParser.LEQ_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public Leq_comparison_expressionContext(Comparison_expressionContext context) { CopyFrom(context); }
	}
	public partial class Lt_comparison_expressionContext : Comparison_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARROW() { return GetToken(OxideParser.LARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public Lt_comparison_expressionContext(Comparison_expressionContext context) { CopyFrom(context); }
	}
	public partial class Pass_comparison_expressionContext : Comparison_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public Pass_comparison_expressionContext(Comparison_expressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Comparison_expressionContext comparison_expression() {
		return comparison_expression(0);
	}

	private Comparison_expressionContext comparison_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Comparison_expressionContext _localctx = new Comparison_expressionContext(Context, _parentState);
		Comparison_expressionContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_comparison_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Pass_comparison_expressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 567;
			cast_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 583;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 581;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
					case 1:
						{
						_localctx = new Lt_comparison_expressionContext(new Comparison_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_comparison_expression);
						State = 569;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 570;
						Match(LARROW);
						State = 571;
						cast_expression(0);
						}
						break;
					case 2:
						{
						_localctx = new Gt_comparison_expressionContext(new Comparison_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_comparison_expression);
						State = 572;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 573;
						Match(RARROW);
						State = 574;
						cast_expression(0);
						}
						break;
					case 3:
						{
						_localctx = new Leq_comparison_expressionContext(new Comparison_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_comparison_expression);
						State = 575;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 576;
						Match(LEQ_OP);
						State = 577;
						cast_expression(0);
						}
						break;
					case 4:
						{
						_localctx = new Geq_comparison_expressionContext(new Comparison_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_comparison_expression);
						State = 578;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 579;
						Match(GEQ_OP);
						State = 580;
						cast_expression(0);
						}
						break;
					}
					} 
				}
				State = 585;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Cast_expressionContext : ParserRuleContext {
		public Cast_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_expression; } }
	 
		public Cast_expressionContext() { }
		public virtual void CopyFrom(Cast_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Op_cast_expressionContext : Cast_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(OxideParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Op_cast_expressionContext(Cast_expressionContext context) { CopyFrom(context); }
	}
	public partial class Pass_cast_expressionContext : Cast_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Shift_expressionContext shift_expression() {
			return GetRuleContext<Shift_expressionContext>(0);
		}
		public Pass_cast_expressionContext(Cast_expressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Cast_expressionContext cast_expression() {
		return cast_expression(0);
	}

	private Cast_expressionContext cast_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Cast_expressionContext _localctx = new Cast_expressionContext(Context, _parentState);
		Cast_expressionContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_cast_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Pass_cast_expressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 587;
			shift_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 594;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Op_cast_expressionContext(new Cast_expressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_cast_expression);
					State = 589;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 590;
					Match(AS);
					State = 591;
					type();
					}
					} 
				}
				State = 596;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expression; } }
	 
		public Shift_expressionContext() { }
		public virtual void CopyFrom(Shift_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Right_shift_expressionContext : Shift_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Shift_expressionContext shift_expression() {
			return GetRuleContext<Shift_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Right_shiftContext right_shift() {
			return GetRuleContext<Right_shiftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_expressionContext add_expression() {
			return GetRuleContext<Add_expressionContext>(0);
		}
		public Right_shift_expressionContext(Shift_expressionContext context) { CopyFrom(context); }
	}
	public partial class Pass_shift_expressionContext : Shift_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Add_expressionContext add_expression() {
			return GetRuleContext<Add_expressionContext>(0);
		}
		public Pass_shift_expressionContext(Shift_expressionContext context) { CopyFrom(context); }
	}
	public partial class Left_shift_expressionContext : Shift_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Shift_expressionContext shift_expression() {
			return GetRuleContext<Shift_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Left_shiftContext left_shift() {
			return GetRuleContext<Left_shiftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_expressionContext add_expression() {
			return GetRuleContext<Add_expressionContext>(0);
		}
		public Left_shift_expressionContext(Shift_expressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		return shift_expression(0);
	}

	private Shift_expressionContext shift_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Shift_expressionContext _localctx = new Shift_expressionContext(Context, _parentState);
		Shift_expressionContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_shift_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Pass_shift_expressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 598;
			add_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 610;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 608;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
					case 1:
						{
						_localctx = new Left_shift_expressionContext(new Shift_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_shift_expression);
						State = 600;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 601;
						left_shift();
						State = 602;
						add_expression(0);
						}
						break;
					case 2:
						{
						_localctx = new Right_shift_expressionContext(new Shift_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_shift_expression);
						State = 604;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 605;
						right_shift();
						State = 606;
						add_expression(0);
						}
						break;
					}
					} 
				}
				State = 612;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Add_expressionContext : ParserRuleContext {
		public Add_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_expression; } }
	 
		public Add_expressionContext() { }
		public virtual void CopyFrom(Add_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Minus_add_expressionContext : Add_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Add_expressionContext add_expression() {
			return GetRuleContext<Add_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(OxideParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Multiply_expressionContext multiply_expression() {
			return GetRuleContext<Multiply_expressionContext>(0);
		}
		public Minus_add_expressionContext(Add_expressionContext context) { CopyFrom(context); }
	}
	public partial class Plus_add_expressionContext : Add_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Add_expressionContext add_expression() {
			return GetRuleContext<Add_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(OxideParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Multiply_expressionContext multiply_expression() {
			return GetRuleContext<Multiply_expressionContext>(0);
		}
		public Plus_add_expressionContext(Add_expressionContext context) { CopyFrom(context); }
	}
	public partial class Pass_add_expressionContext : Add_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Multiply_expressionContext multiply_expression() {
			return GetRuleContext<Multiply_expressionContext>(0);
		}
		public Pass_add_expressionContext(Add_expressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Add_expressionContext add_expression() {
		return add_expression(0);
	}

	private Add_expressionContext add_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Add_expressionContext _localctx = new Add_expressionContext(Context, _parentState);
		Add_expressionContext _prevctx = _localctx;
		int _startState = 80;
		EnterRecursionRule(_localctx, 80, RULE_add_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Pass_add_expressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 614;
			multiply_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 624;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 622;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
					case 1:
						{
						_localctx = new Plus_add_expressionContext(new Add_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_add_expression);
						State = 616;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 617;
						Match(PLUS);
						State = 618;
						multiply_expression(0);
						}
						break;
					case 2:
						{
						_localctx = new Minus_add_expressionContext(new Add_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_add_expression);
						State = 619;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 620;
						Match(MINUS);
						State = 621;
						multiply_expression(0);
						}
						break;
					}
					} 
				}
				State = 626;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Multiply_expressionContext : ParserRuleContext {
		public Multiply_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiply_expression; } }
	 
		public Multiply_expressionContext() { }
		public virtual void CopyFrom(Multiply_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Mul_multiply_expressionContext : Multiply_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Multiply_expressionContext multiply_expression() {
			return GetRuleContext<Multiply_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(OxideParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Mul_multiply_expressionContext(Multiply_expressionContext context) { CopyFrom(context); }
	}
	public partial class Div_multiply_expressionContext : Multiply_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Multiply_expressionContext multiply_expression() {
			return GetRuleContext<Multiply_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(OxideParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Div_multiply_expressionContext(Multiply_expressionContext context) { CopyFrom(context); }
	}
	public partial class Mod_multiply_expressionContext : Multiply_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Multiply_expressionContext multiply_expression() {
			return GetRuleContext<Multiply_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(OxideParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Mod_multiply_expressionContext(Multiply_expressionContext context) { CopyFrom(context); }
	}
	public partial class Pass_multiply_expressionContext : Multiply_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Pass_multiply_expressionContext(Multiply_expressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Multiply_expressionContext multiply_expression() {
		return multiply_expression(0);
	}

	private Multiply_expressionContext multiply_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Multiply_expressionContext _localctx = new Multiply_expressionContext(Context, _parentState);
		Multiply_expressionContext _prevctx = _localctx;
		int _startState = 82;
		EnterRecursionRule(_localctx, 82, RULE_multiply_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Pass_multiply_expressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 628;
			unary_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 641;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 639;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
					case 1:
						{
						_localctx = new Mul_multiply_expressionContext(new Multiply_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_multiply_expression);
						State = 630;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 631;
						Match(STAR);
						State = 632;
						unary_expression();
						}
						break;
					case 2:
						{
						_localctx = new Div_multiply_expressionContext(new Multiply_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_multiply_expression);
						State = 633;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 634;
						Match(DIV);
						State = 635;
						unary_expression();
						}
						break;
					case 3:
						{
						_localctx = new Mod_multiply_expressionContext(new Multiply_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_multiply_expression);
						State = 636;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 637;
						Match(MOD);
						State = 638;
						unary_expression();
						}
						break;
					}
					} 
				}
				State = 643;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
	 
		public Unary_expressionContext() { }
		public virtual void CopyFrom(Unary_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Not_unary_expressionContext : Unary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(OxideParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Not_unary_expressionContext(Unary_expressionContext context) { CopyFrom(context); }
	}
	public partial class Pass_unary_expressionContext : Unary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Base_expressionContext base_expression() {
			return GetRuleContext<Base_expressionContext>(0);
		}
		public Pass_unary_expressionContext(Unary_expressionContext context) { CopyFrom(context); }
	}
	public partial class Derived_unary_expressionContext : Unary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DERIVED() { return GetToken(OxideParser.DERIVED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Derived_unary_expressionContext(Unary_expressionContext context) { CopyFrom(context); }
	}
	public partial class Minus_unary_expressionContext : Unary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(OxideParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Minus_unary_expressionContext(Unary_expressionContext context) { CopyFrom(context); }
	}
	public partial class Deref_unary_expressionContext : Unary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(OxideParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Deref_unary_expressionContext(Unary_expressionContext context) { CopyFrom(context); }
	}
	public partial class Ref_unary_expressionContext : Unary_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(OxideParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUT() { return GetToken(OxideParser.MUT, 0); }
		public Ref_unary_expressionContext(Unary_expressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_unary_expression);
		int _la;
		try {
			State = 658;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNSAFE:
			case THIS_FIELD:
			case IF:
			case LBRACK:
			case LBRACE:
			case DCOLON:
			case TRUE:
			case FALSE:
			case IDENTIFIER:
			case INT_NUMBER:
			case HEX_NUMBER:
			case BINARY_NUMBER:
			case STRING_LITERAL:
				_localctx = new Pass_unary_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 644;
				base_expression(0);
				}
				break;
			case MINUS:
				_localctx = new Minus_unary_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 645;
				Match(MINUS);
				State = 646;
				unary_expression();
				}
				break;
			case NOT:
				_localctx = new Not_unary_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 647;
				Match(NOT);
				State = 648;
				unary_expression();
				}
				break;
			case AMP:
				_localctx = new Ref_unary_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 649;
				Match(AMP);
				State = 651;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MUT) {
					{
					State = 650;
					Match(MUT);
					}
				}

				State = 653;
				unary_expression();
				}
				break;
			case DERIVED:
				_localctx = new Derived_unary_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 654;
				Match(DERIVED);
				State = 655;
				unary_expression();
				}
				break;
			case STAR:
				_localctx = new Deref_unary_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 656;
				Match(STAR);
				State = 657;
				unary_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_expressionContext : ParserRuleContext {
		public Base_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_expression; } }
	 
		public Base_expressionContext() { }
		public virtual void CopyFrom(Base_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Block_base_expressionContext : Base_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Block_expressionContext block_expression() {
			return GetRuleContext<Block_expressionContext>(0);
		}
		public Block_base_expressionContext(Base_expressionContext context) { CopyFrom(context); }
	}
	public partial class Literal_base_expressionContext : Base_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public Literal_base_expressionContext(Base_expressionContext context) { CopyFrom(context); }
	}
	public partial class Function_call_base_expressionContext : Base_expressionContext {
		public Type_generic_paramsContext qn_generics;
		public Type_generic_paramsContext method_generics;
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext[] qualified_name() {
			return GetRuleContexts<Qualified_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name(int i) {
			return GetRuleContext<Qualified_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(OxideParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(OxideParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCOLON() { return GetToken(OxideParser.DCOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_generic_paramsContext[] type_generic_params() {
			return GetRuleContexts<Type_generic_paramsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_generic_paramsContext type_generic_params(int i) {
			return GetRuleContext<Type_generic_paramsContext>(i);
		}
		public Function_call_base_expressionContext(Base_expressionContext context) { CopyFrom(context); }
	}
	public partial class This_base_expressionContext : Base_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS_FIELD() { return GetToken(OxideParser.THIS_FIELD, 0); }
		public This_base_expressionContext(Base_expressionContext context) { CopyFrom(context); }
	}
	public partial class Method_call_base_expressionContext : Base_expressionContext {
		public Type_generic_paramsContext method_generics;
		[System.Diagnostics.DebuggerNonUserCode] public Base_expressionContext base_expression() {
			return GetRuleContext<Base_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(OxideParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(OxideParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(OxideParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_generic_paramsContext type_generic_params() {
			return GetRuleContext<Type_generic_paramsContext>(0);
		}
		public Method_call_base_expressionContext(Base_expressionContext context) { CopyFrom(context); }
	}
	public partial class Qualified_base_expressionContext : Base_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext[] qualified_name() {
			return GetRuleContexts<Qualified_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name(int i) {
			return GetRuleContext<Qualified_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_generic_paramsContext type_generic_params() {
			return GetRuleContext<Type_generic_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCOLON() { return GetToken(OxideParser.DCOLON, 0); }
		public Qualified_base_expressionContext(Base_expressionContext context) { CopyFrom(context); }
	}
	public partial class Struct_base_expressionContext : Base_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_initialiserContext struct_initialiser() {
			return GetRuleContext<Struct_initialiserContext>(0);
		}
		public Struct_base_expressionContext(Base_expressionContext context) { CopyFrom(context); }
	}
	public partial class Access_base_expressionContext : Base_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Base_expressionContext base_expression() {
			return GetRuleContext<Base_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(OxideParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Access_base_expressionContext(Base_expressionContext context) { CopyFrom(context); }
	}
	public partial class Bracket_base_expressionContext : Base_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(OxideParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(OxideParser.RBRACK, 0); }
		public Bracket_base_expressionContext(Base_expressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Base_expressionContext base_expression() {
		return base_expression(0);
	}

	private Base_expressionContext base_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Base_expressionContext _localctx = new Base_expressionContext(Context, _parentState);
		Base_expressionContext _prevctx = _localctx;
		int _startState = 86;
		EnterRecursionRule(_localctx, 86, RULE_base_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 692;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				{
				_localctx = new Bracket_base_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 661;
				Match(LBRACK);
				State = 662;
				expression();
				State = 663;
				Match(RBRACK);
				}
				break;
			case 2:
				{
				_localctx = new Literal_base_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 665;
				literal();
				}
				break;
			case 3:
				{
				_localctx = new This_base_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 666;
				Match(THIS_FIELD);
				}
				break;
			case 4:
				{
				_localctx = new Function_call_base_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 667;
				qualified_name();
				State = 672;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
				case 1:
					{
					State = 668;
					((Function_call_base_expressionContext)_localctx).qn_generics = type_generic_params();
					State = 669;
					Match(DCOLON);
					State = 670;
					qualified_name();
					}
					break;
				}
				State = 675;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LARROW) {
					{
					State = 674;
					((Function_call_base_expressionContext)_localctx).method_generics = type_generic_params();
					}
				}

				State = 677;
				Match(LBRACK);
				State = 679;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 19)) & ~0x3f) == 0 && ((1L << (_la - 19)) & ((1L << (UNSAFE - 19)) | (1L << (DERIVED - 19)) | (1L << (THIS_FIELD - 19)) | (1L << (RETURN - 19)) | (1L << (IF - 19)) | (1L << (LBRACK - 19)) | (1L << (LBRACE - 19)) | (1L << (DCOLON - 19)) | (1L << (AMP - 19)) | (1L << (MINUS - 19)) | (1L << (STAR - 19)) | (1L << (NOT - 19)) | (1L << (TRUE - 19)) | (1L << (FALSE - 19)) | (1L << (IDENTIFIER - 19)) | (1L << (INT_NUMBER - 19)) | (1L << (HEX_NUMBER - 19)) | (1L << (BINARY_NUMBER - 19)) | (1L << (STRING_LITERAL - 19)))) != 0)) {
					{
					State = 678;
					arguments();
					}
				}

				State = 681;
				Match(RBRACK);
				}
				break;
			case 5:
				{
				_localctx = new Qualified_base_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 683;
				qualified_name();
				State = 688;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
				case 1:
					{
					State = 684;
					type_generic_params();
					State = 685;
					Match(DCOLON);
					State = 686;
					qualified_name();
					}
					break;
				}
				}
				break;
			case 6:
				{
				_localctx = new Struct_base_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 690;
				struct_initialiser();
				}
				break;
			case 7:
				{
				_localctx = new Block_base_expressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 691;
				block_expression();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 711;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 709;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
					case 1:
						{
						_localctx = new Method_call_base_expressionContext(new Base_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_base_expression);
						State = 694;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 695;
						Match(PERIOD);
						State = 696;
						name();
						State = 698;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==LARROW) {
							{
							State = 697;
							((Method_call_base_expressionContext)_localctx).method_generics = type_generic_params();
							}
						}

						State = 700;
						Match(LBRACK);
						State = 702;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 19)) & ~0x3f) == 0 && ((1L << (_la - 19)) & ((1L << (UNSAFE - 19)) | (1L << (DERIVED - 19)) | (1L << (THIS_FIELD - 19)) | (1L << (RETURN - 19)) | (1L << (IF - 19)) | (1L << (LBRACK - 19)) | (1L << (LBRACE - 19)) | (1L << (DCOLON - 19)) | (1L << (AMP - 19)) | (1L << (MINUS - 19)) | (1L << (STAR - 19)) | (1L << (NOT - 19)) | (1L << (TRUE - 19)) | (1L << (FALSE - 19)) | (1L << (IDENTIFIER - 19)) | (1L << (INT_NUMBER - 19)) | (1L << (HEX_NUMBER - 19)) | (1L << (BINARY_NUMBER - 19)) | (1L << (STRING_LITERAL - 19)))) != 0)) {
							{
							State = 701;
							arguments();
							}
						}

						State = 704;
						Match(RBRACK);
						}
						break;
					case 2:
						{
						_localctx = new Access_base_expressionContext(new Base_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_base_expression);
						State = 706;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 707;
						Match(PERIOD);
						State = 708;
						name();
						}
						break;
					}
					} 
				}
				State = 713;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Block_expressionContext : ParserRuleContext {
		public Block_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_expression; } }
	 
		public Block_expressionContext() { }
		public virtual void CopyFrom(Block_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Block_block_expressionContext : Block_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSAFE() { return GetToken(OxideParser.UNSAFE, 0); }
		public Block_block_expressionContext(Block_expressionContext context) { CopyFrom(context); }
	}
	public partial class If_block_expressionContext : Block_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_expressionContext if_expression() {
			return GetRuleContext<If_expressionContext>(0);
		}
		public If_block_expressionContext(Block_expressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Block_expressionContext block_expression() {
		Block_expressionContext _localctx = new Block_expressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_block_expression);
		int _la;
		try {
			State = 719;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNSAFE:
			case LBRACE:
				_localctx = new Block_block_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNSAFE) {
					{
					State = 714;
					Match(UNSAFE);
					}
				}

				State = 717;
				block();
				}
				break;
			case IF:
				_localctx = new If_block_expressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 718;
				if_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_expressionContext : ParserRuleContext {
		public BlockContext body;
		public BlockContext else_block;
		public If_expressionContext else_if;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(OxideParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public If_conditionContext if_condition() {
			return GetRuleContext<If_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(OxideParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public If_expressionContext if_expression() {
			return GetRuleContext<If_expressionContext>(0);
		}
		public If_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_expression; } }
	}

	[RuleVersion(0)]
	public If_expressionContext if_expression() {
		If_expressionContext _localctx = new If_expressionContext(Context, State);
		EnterRule(_localctx, 90, RULE_if_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721;
			Match(IF);
			State = 722;
			if_condition();
			State = 723;
			_localctx.body = block();
			State = 729;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				{
				State = 724;
				Match(ELSE);
				State = 727;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LBRACE:
					{
					State = 725;
					_localctx.else_block = block();
					}
					break;
				case IF:
					{
					State = 726;
					_localctx.else_if = if_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_conditionContext : ParserRuleContext {
		public If_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_condition; } }
	 
		public If_conditionContext() { }
		public virtual void CopyFrom(If_conditionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Var_if_conditionContext : If_conditionContext {
		public Type_generic_paramsContext qn_generics;
		public ExpressionContext cond;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(OxideParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext[] qualified_name() {
			return GetRuleContexts<Qualified_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name(int i) {
			return GetRuleContext<Qualified_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(OxideParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCOLON() { return GetToken(OxideParser.DCOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public If_var_valuesContext if_var_values() {
			return GetRuleContext<If_var_valuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_generic_paramsContext type_generic_params() {
			return GetRuleContext<Type_generic_paramsContext>(0);
		}
		public Var_if_conditionContext(If_conditionContext context) { CopyFrom(context); }
	}
	public partial class Simple_if_conditionContext : If_conditionContext {
		public ExpressionContext cond;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Simple_if_conditionContext(If_conditionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public If_conditionContext if_condition() {
		If_conditionContext _localctx = new If_conditionContext(Context, State);
		EnterRule(_localctx, 92, RULE_if_condition);
		int _la;
		try {
			State = 746;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNSAFE:
			case DERIVED:
			case THIS_FIELD:
			case RETURN:
			case IF:
			case LBRACK:
			case LBRACE:
			case DCOLON:
			case AMP:
			case MINUS:
			case STAR:
			case NOT:
			case TRUE:
			case FALSE:
			case IDENTIFIER:
			case INT_NUMBER:
			case HEX_NUMBER:
			case BINARY_NUMBER:
			case STRING_LITERAL:
				_localctx = new Simple_if_conditionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 731;
				((Simple_if_conditionContext)_localctx).cond = expression();
				}
				break;
			case VAR:
				_localctx = new Var_if_conditionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 732;
				Match(VAR);
				State = 733;
				qualified_name();
				State = 738;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LARROW) {
					{
					State = 734;
					((Var_if_conditionContext)_localctx).qn_generics = type_generic_params();
					State = 735;
					Match(DCOLON);
					State = 736;
					qualified_name();
					}
				}

				State = 741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBRACK) {
					{
					State = 740;
					if_var_values();
					}
				}

				State = 743;
				Match(EQUAL);
				State = 744;
				((Var_if_conditionContext)_localctx).cond = expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_var_valuesContext : ParserRuleContext {
		public If_var_valuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_var_values; } }
	 
		public If_var_valuesContext() { }
		public virtual void CopyFrom(If_var_valuesContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Tuple_if_var_valuesContext : If_var_valuesContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(OxideParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(OxideParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(OxideParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(OxideParser.COMMA, i);
		}
		public Tuple_if_var_valuesContext(If_var_valuesContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public If_var_valuesContext if_var_values() {
		If_var_valuesContext _localctx = new If_var_valuesContext(Context, State);
		EnterRule(_localctx, 94, RULE_if_var_values);
		int _la;
		try {
			int _alt;
			_localctx = new Tuple_if_var_valuesContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 748;
			Match(LBRACK);
			State = 749;
			name();
			State = 754;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 750;
					Match(COMMA);
					State = 751;
					name();
					}
					} 
				}
				State = 756;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			}
			State = 758;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 757;
				Match(COMMA);
				}
			}

			State = 760;
			Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(OxideParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(OxideParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 96, RULE_arguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 762;
			argument();
			State = 767;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 763;
					Match(COMMA);
					State = 764;
					argument();
					}
					} 
				}
				State = 769;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			}
			State = 771;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 770;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 98, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 774;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				{
				State = 773;
				label();
				}
				break;
			}
			State = 776;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(OxideParser.COLON, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 100, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 778;
			name();
			State = 779;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_initialiserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Direct_typeContext direct_type() {
			return GetRuleContext<Direct_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(OxideParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(OxideParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Field_initialiserContext[] field_initialiser() {
			return GetRuleContexts<Field_initialiserContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_initialiserContext field_initialiser(int i) {
			return GetRuleContext<Field_initialiserContext>(i);
		}
		public Struct_initialiserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_initialiser; } }
	}

	[RuleVersion(0)]
	public Struct_initialiserContext struct_initialiser() {
		Struct_initialiserContext _localctx = new Struct_initialiserContext(Context, State);
		EnterRule(_localctx, 102, RULE_struct_initialiser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781;
			direct_type();
			State = 782;
			Match(LBRACE);
			State = 786;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 783;
				field_initialiser();
				}
				}
				State = 788;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 789;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_initialiserContext : ParserRuleContext {
		public Field_initialiserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_initialiser; } }
	 
		public Field_initialiserContext() { }
		public virtual void CopyFrom(Field_initialiserContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Label_field_initialiserContext : Field_initialiserContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(OxideParser.COMMA, 0); }
		public Label_field_initialiserContext(Field_initialiserContext context) { CopyFrom(context); }
	}
	public partial class Var_field_initialiserContext : Field_initialiserContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(OxideParser.COMMA, 0); }
		public Var_field_initialiserContext(Field_initialiserContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Field_initialiserContext field_initialiser() {
		Field_initialiserContext _localctx = new Field_initialiserContext(Context, State);
		EnterRule(_localctx, 104, RULE_field_initialiser);
		try {
			State = 798;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				_localctx = new Label_field_initialiserContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 791;
				label();
				State = 792;
				expression();
				State = 793;
				Match(COMMA);
				}
				break;
			case 2:
				_localctx = new Var_field_initialiserContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 795;
				name();
				State = 796;
				Match(COMMA);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(OxideParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(OxideParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUT() { return GetToken(OxideParser.MUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(OxideParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(OxideParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_statement; } }
	}

	[RuleVersion(0)]
	public Variable_statementContext variable_statement() {
		Variable_statementContext _localctx = new Variable_statementContext(Context, State);
		EnterRule(_localctx, 106, RULE_variable_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 800;
			Match(VAR);
			State = 802;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MUT) {
				{
				State = 801;
				Match(MUT);
				}
			}

			State = 804;
			name();
			State = 807;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 805;
				Match(COLON);
				State = 806;
				type();
				}
			}

			State = 811;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 809;
				Match(EQUAL);
				State = 810;
				expression();
				}
			}

			State = 813;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(OxideParser.IDENTIFIER, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 108, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 815;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Direct_type_baseContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public Direct_typeContext direct_type() {
			return GetRuleContext<Direct_typeContext>(0);
		}
		public Direct_type_baseContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class This_typeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THIS_TYPE() { return GetToken(OxideParser.THIS_TYPE, 0); }
		public This_typeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class Derived_typeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARROW() { return GetToken(OxideParser.LARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(OxideParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Direct_typeContext direct_type() {
			return GetRuleContext<Direct_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(OxideParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DCOLON() { return GetToken(OxideParser.DCOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Derived_typeContext(TypeContext context) { CopyFrom(context); }
	}
	public partial class Flagged_typeContext : TypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_flagsContext type_flags() {
			return GetRuleContext<Type_flagsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Flagged_typeContext(TypeContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 110, RULE_type);
		try {
			State = 830;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REF:
			case WEAK:
			case DERIVED:
			case AMP:
			case STAR:
				_localctx = new Flagged_typeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 817;
				type_flags();
				State = 818;
				type();
				}
				break;
			case DCOLON:
			case IDENTIFIER:
				_localctx = new Direct_type_baseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 820;
				direct_type();
				}
				break;
			case LARROW:
				_localctx = new Derived_typeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 821;
				Match(LARROW);
				State = 822;
				type();
				State = 823;
				Match(AS);
				State = 824;
				direct_type();
				State = 825;
				Match(RARROW);
				State = 826;
				Match(DCOLON);
				State = 827;
				name();
				}
				break;
			case THIS_TYPE:
				_localctx = new This_typeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 829;
				Match(THIS_TYPE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Direct_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_nameContext qualified_name() {
			return GetRuleContext<Qualified_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_generic_paramsContext type_generic_params() {
			return GetRuleContext<Type_generic_paramsContext>(0);
		}
		public Direct_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direct_type; } }
	}

	[RuleVersion(0)]
	public Direct_typeContext direct_type() {
		Direct_typeContext _localctx = new Direct_typeContext(Context, State);
		EnterRule(_localctx, 112, RULE_direct_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 832;
			qualified_name();
			State = 834;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 833;
				type_generic_params();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_generic_paramsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARROW() { return GetToken(OxideParser.LARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(OxideParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(OxideParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(OxideParser.COMMA, i);
		}
		public Type_generic_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_generic_params; } }
	}

	[RuleVersion(0)]
	public Type_generic_paramsContext type_generic_params() {
		Type_generic_paramsContext _localctx = new Type_generic_paramsContext(Context, State);
		EnterRule(_localctx, 114, RULE_type_generic_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 836;
			Match(LARROW);
			State = 837;
			type();
			State = 842;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 838;
				Match(COMMA);
				State = 839;
				type();
				}
				}
				State = 844;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 845;
			Match(RARROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_flagsContext : ParserRuleContext {
		public Type_flagsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_flags; } }
	 
		public Type_flagsContext() { }
		public virtual void CopyFrom(Type_flagsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Ptr_type_flagsContext : Type_flagsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(OxideParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUT() { return GetToken(OxideParser.MUT, 0); }
		public Ptr_type_flagsContext(Type_flagsContext context) { CopyFrom(context); }
	}
	public partial class Local_type_flagsContext : Type_flagsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(OxideParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUT() { return GetToken(OxideParser.MUT, 0); }
		public Local_type_flagsContext(Type_flagsContext context) { CopyFrom(context); }
	}
	public partial class Derived_type_flagsContext : Type_flagsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DERIVED() { return GetToken(OxideParser.DERIVED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(OxideParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEAK() { return GetToken(OxideParser.WEAK, 0); }
		public Derived_type_flagsContext(Type_flagsContext context) { CopyFrom(context); }
	}
	public partial class Ref_type_flagsContext : Type_flagsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(OxideParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEAK() { return GetToken(OxideParser.WEAK, 0); }
		public Ref_type_flagsContext(Type_flagsContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Type_flagsContext type_flags() {
		Type_flagsContext _localctx = new Type_flagsContext(Context, State);
		EnterRule(_localctx, 116, RULE_type_flags);
		int _la;
		try {
			State = 858;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REF:
			case WEAK:
				_localctx = new Ref_type_flagsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 847;
				_la = TokenStream.LA(1);
				if ( !(_la==REF || _la==WEAK) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case DERIVED:
				_localctx = new Derived_type_flagsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 848;
				Match(DERIVED);
				State = 849;
				_la = TokenStream.LA(1);
				if ( !(_la==REF || _la==WEAK) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case AMP:
				_localctx = new Local_type_flagsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 850;
				Match(AMP);
				State = 852;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MUT) {
					{
					State = 851;
					Match(MUT);
					}
				}

				}
				break;
			case STAR:
				_localctx = new Ptr_type_flagsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 854;
				Match(STAR);
				State = 856;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MUT) {
					{
					State = 855;
					Match(MUT);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
	 
		public VisibilityContext() { }
		public virtual void CopyFrom(VisibilityContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Public_visibilityContext : VisibilityContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(OxideParser.PUBLIC, 0); }
		public Public_visibilityContext(VisibilityContext context) { CopyFrom(context); }
	}
	public partial class Private_visibilityContext : VisibilityContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVATE() { return GetToken(OxideParser.PRIVATE, 0); }
		public Private_visibilityContext(VisibilityContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(Context, State);
		EnterRule(_localctx, 118, RULE_visibility);
		try {
			State = 862;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PUBLIC:
				_localctx = new Public_visibilityContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 860;
				Match(PUBLIC);
				}
				break;
			case PRIVATE:
				_localctx = new Private_visibilityContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 861;
				Match(PRIVATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Int_literalContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(OxideParser.INT_NUMBER, 0); }
		public Int_literalContext(LiteralContext context) { CopyFrom(context); }
	}
	public partial class String_literalContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(OxideParser.STRING_LITERAL, 0); }
		public String_literalContext(LiteralContext context) { CopyFrom(context); }
	}
	public partial class Hex_literalContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(OxideParser.HEX_NUMBER, 0); }
		public Hex_literalContext(LiteralContext context) { CopyFrom(context); }
	}
	public partial class Outer_bool_literalContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_literalContext boolean_literal() {
			return GetRuleContext<Boolean_literalContext>(0);
		}
		public Outer_bool_literalContext(LiteralContext context) { CopyFrom(context); }
	}
	public partial class Binary_literalContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_NUMBER() { return GetToken(OxideParser.BINARY_NUMBER, 0); }
		public Binary_literalContext(LiteralContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 120, RULE_literal);
		try {
			State = 869;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
				_localctx = new Outer_bool_literalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 864;
				boolean_literal();
				}
				break;
			case INT_NUMBER:
				_localctx = new Int_literalContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 865;
				Match(INT_NUMBER);
				}
				break;
			case HEX_NUMBER:
				_localctx = new Hex_literalContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 866;
				Match(HEX_NUMBER);
				}
				break;
			case BINARY_NUMBER:
				_localctx = new Binary_literalContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 867;
				Match(BINARY_NUMBER);
				}
				break;
			case STRING_LITERAL:
				_localctx = new String_literalContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 868;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_literalContext : ParserRuleContext {
		public Boolean_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_literal; } }
	 
		public Boolean_literalContext() { }
		public virtual void CopyFrom(Boolean_literalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class True_boolean_literalContext : Boolean_literalContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(OxideParser.TRUE, 0); }
		public True_boolean_literalContext(Boolean_literalContext context) { CopyFrom(context); }
	}
	public partial class False_boolean_literalContext : Boolean_literalContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(OxideParser.FALSE, 0); }
		public False_boolean_literalContext(Boolean_literalContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Boolean_literalContext boolean_literal() {
		Boolean_literalContext _localctx = new Boolean_literalContext(Context, State);
		EnterRule(_localctx, 122, RULE_boolean_literal);
		try {
			State = 873;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
				_localctx = new True_boolean_literalContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 871;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new False_boolean_literalContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 872;
				Match(FALSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Left_shiftContext : ParserRuleContext {
		public IToken f;
		public IToken s;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LARROW() { return GetTokens(OxideParser.LARROW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARROW(int i) {
			return GetToken(OxideParser.LARROW, i);
		}
		public Left_shiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_left_shift; } }
	}

	[RuleVersion(0)]
	public Left_shiftContext left_shift() {
		Left_shiftContext _localctx = new Left_shiftContext(Context, State);
		EnterRule(_localctx, 124, RULE_left_shift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 875;
			_localctx.f = Match(LARROW);
			State = 876;
			_localctx.s = Match(LARROW);
			State = 877;
			if (!((_localctx.f!=null?_localctx.f.TokenIndex:0) + 1 == (_localctx.s!=null?_localctx.s.TokenIndex:0))) throw new FailedPredicateException(this, "$f.index + 1 == $s.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_shiftContext : ParserRuleContext {
		public IToken f;
		public IToken s;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RARROW() { return GetTokens(OxideParser.RARROW); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW(int i) {
			return GetToken(OxideParser.RARROW, i);
		}
		public Right_shiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_shift; } }
	}

	[RuleVersion(0)]
	public Right_shiftContext right_shift() {
		Right_shiftContext _localctx = new Right_shiftContext(Context, State);
		EnterRule(_localctx, 126, RULE_right_shift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 879;
			_localctx.f = Match(RARROW);
			State = 880;
			_localctx.s = Match(RARROW);
			State = 881;
			if (!((_localctx.f!=null?_localctx.f.TokenIndex:0) + 1 == (_localctx.s!=null?_localctx.s.TokenIndex:0))) throw new FailedPredicateException(this, "$f.index + 1 == $s.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return qualified_name_part_sempred((Qualified_name_partContext)_localctx, predIndex);
		case 31: return or_expression_sempred((Or_expressionContext)_localctx, predIndex);
		case 32: return and_expression_sempred((And_expressionContext)_localctx, predIndex);
		case 33: return inc_or_expression_sempred((Inc_or_expressionContext)_localctx, predIndex);
		case 34: return ex_or_expression_sempred((Ex_or_expressionContext)_localctx, predIndex);
		case 35: return bit_and_expression_sempred((Bit_and_expressionContext)_localctx, predIndex);
		case 36: return equal_expression_sempred((Equal_expressionContext)_localctx, predIndex);
		case 37: return comparison_expression_sempred((Comparison_expressionContext)_localctx, predIndex);
		case 38: return cast_expression_sempred((Cast_expressionContext)_localctx, predIndex);
		case 39: return shift_expression_sempred((Shift_expressionContext)_localctx, predIndex);
		case 40: return add_expression_sempred((Add_expressionContext)_localctx, predIndex);
		case 41: return multiply_expression_sempred((Multiply_expressionContext)_localctx, predIndex);
		case 43: return base_expression_sempred((Base_expressionContext)_localctx, predIndex);
		case 62: return left_shift_sempred((Left_shiftContext)_localctx, predIndex);
		case 63: return right_shift_sempred((Right_shiftContext)_localctx, predIndex);
		}
		return true;
	}
	private bool qualified_name_part_sempred(Qualified_name_partContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}
	private bool or_expression_sempred(Or_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool and_expression_sempred(And_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool inc_or_expression_sempred(Inc_or_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool ex_or_expression_sempred(Ex_or_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bit_and_expression_sempred(Bit_and_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equal_expression_sempred(Equal_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool comparison_expression_sempred(Comparison_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 4);
		case 9: return Precpred(Context, 3);
		case 10: return Precpred(Context, 2);
		case 11: return Precpred(Context, 1);
		}
		return true;
	}
	private bool cast_expression_sempred(Cast_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool shift_expression_sempred(Shift_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool add_expression_sempred(Add_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 2);
		case 16: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiply_expression_sempred(Multiply_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17: return Precpred(Context, 3);
		case 18: return Precpred(Context, 2);
		case 19: return Precpred(Context, 1);
		}
		return true;
	}
	private bool base_expression_sempred(Base_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return Precpred(Context, 6);
		case 21: return Precpred(Context, 5);
		}
		return true;
	}
	private bool left_shift_sempred(Left_shiftContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return (_localctx.f!=null?_localctx.f.TokenIndex:0) + 1 == (_localctx.s!=null?_localctx.s.TokenIndex:0);
		}
		return true;
	}
	private bool right_shift_sempred(Right_shiftContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return (_localctx.f!=null?_localctx.f.TokenIndex:0) + 1 == (_localctx.s!=null?_localctx.s.TokenIndex:0);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x46', '\x376', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x3', '\x2', '\x3', '\x2', '\a', 
		'\x2', '\x85', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x88', '\v', '\x2', 
		'\x3', '\x2', '\a', '\x2', '\x8B', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\x8E', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x99', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\xA1', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '\xA4', '\v', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '\xAD', '\n', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '\xB3', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x5', '\b', '\xB8', '\n', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\xBD', '\n', '\b', '\x3', '\b', 
		'\x3', '\b', '\a', '\b', '\xC1', '\n', '\b', '\f', '\b', '\xE', '\b', 
		'\xC4', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\a', '\t', '\xCC', '\n', '\t', '\f', '\t', 
		'\xE', '\t', '\xCF', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x5', '\n', '\xD4', '\n', '\n', '\x3', '\n', '\x5', '\n', '\xD7', '\n', 
		'\n', '\x3', '\n', '\x5', '\n', '\xDA', '\n', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x5', '\v', 
		'\xE2', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\a', '\v', '\xEA', '\n', '\v', '\f', '\v', 
		'\xE', '\v', '\xED', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x5', 
		'\r', '\xF7', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\xFC', '\n', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x100', 
		'\n', '\r', '\f', '\r', '\xE', '\r', '\x103', '\v', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x5', '\xE', '\x108', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x10E', 
		'\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x113', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x116', '\v', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x11C', '\n', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x122', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\a', '\xF', '\x128', '\n', '\xF', '\f', '\xF', '\xE', '\xF', 
		'\x12B', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x5', 
		'\x10', '\x130', '\n', '\x10', '\x3', '\x10', '\x5', '\x10', '\x133', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\x139', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\x13D', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\x141', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x145', 
		'\n', '\x11', '\x3', '\x11', '\x5', '\x11', '\x148', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\x14C', '\n', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\a', '\x12', '\x150', '\n', '\x12', '\f', '\x12', '\xE', 
		'\x12', '\x153', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\x15B', '\n', 
		'\x13', '\f', '\x13', '\xE', '\x13', '\x15E', '\v', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', 
		'\x165', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\x168', '\v', '\x14', 
		'\x3', '\x15', '\x5', '\x15', '\x16B', '\n', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x170', '\n', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\a', '\x15', '\x174', '\n', '\x15', '\f', '\x15', '\xE', 
		'\x15', '\x177', '\v', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x5', '\x16', '\x17C', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\x181', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x5', '\x17', '\x188', '\n', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x18B', '\n', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x190', '\n', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\x196', 
		'\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x199', '\v', '\x17', '\x5', 
		'\x17', '\x19B', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x1A0', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\x1A9', '\n', '\x18', '\x3', '\x18', '\x5', '\x18', '\x1AC', 
		'\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x1B0', '\n', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x1B4', '\n', '\x1A', 
		'\f', '\x1A', '\xE', '\x1A', '\x1B7', '\v', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x1BE', 
		'\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x1C1', '\v', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x1C4', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x5', '\x1B', '\x1CE', '\n', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x1D8', '\n', '\x1D', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x1E3', '\n', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x1E7', '\n', '\x1E', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x5', ' ', '\x1F0', '\n', ' ', '\x5', ' ', '\x1F2', 
		'\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\a', '!', '\x1FA', '\n', '!', '\f', '!', '\xE', '!', '\x1FD', 
		'\v', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\a', '\"', '\x205', '\n', '\"', '\f', '\"', '\xE', 
		'\"', '\x208', '\v', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\a', '#', '\x210', '\n', '#', '\f', '#', 
		'\xE', '#', '\x213', '\v', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\a', '$', '\x21B', '\n', '$', '\f', '$', 
		'\xE', '$', '\x21E', '\v', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\a', '%', '\x226', '\n', '%', '\f', '%', 
		'\xE', '%', '\x229', '\v', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\a', 
		'&', '\x234', '\n', '&', '\f', '&', '\xE', '&', '\x237', '\v', '&', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\a', '\'', '\x248', '\n', 
		'\'', '\f', '\'', '\xE', '\'', '\x24B', '\v', '\'', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\a', '(', '\x253', 
		'\n', '(', '\f', '(', '\xE', '(', '\x256', '\v', '(', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\a', ')', '\x263', '\n', ')', 
		'\f', ')', '\xE', ')', '\x266', '\v', ')', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\a', '*', '\x271', '\n', '*', '\f', '*', '\xE', '*', '\x274', '\v', 
		'*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\a', '+', '\x282', '\n', '+', '\f', '+', '\xE', '+', '\x285', '\v', 
		'+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x5', ',', '\x28E', '\n', ',', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\x3', ',', '\x5', ',', '\x295', '\n', ',', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', 
		'-', '\x2A3', '\n', '-', '\x3', '-', '\x5', '-', '\x2A6', '\n', '-', '\x3', 
		'-', '\x3', '-', '\x5', '-', '\x2AA', '\n', '-', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', 
		'\x2B3', '\n', '-', '\x3', '-', '\x3', '-', '\x5', '-', '\x2B7', '\n', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', '\x2BD', 
		'\n', '-', '\x3', '-', '\x3', '-', '\x5', '-', '\x2C1', '\n', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\a', '-', '\x2C8', 
		'\n', '-', '\f', '-', '\xE', '-', '\x2CB', '\v', '-', '\x3', '.', '\x5', 
		'.', '\x2CE', '\n', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x2D2', 
		'\n', '.', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', 
		'\x3', '/', '\x5', '/', '\x2DA', '\n', '/', '\x5', '/', '\x2DC', '\n', 
		'/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x2E5', '\n', '\x30', 
		'\x3', '\x30', '\x5', '\x30', '\x2E8', '\n', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x5', '\x30', '\x2ED', '\n', '\x30', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\a', '\x31', '\x2F3', '\n', 
		'\x31', '\f', '\x31', '\xE', '\x31', '\x2F6', '\v', '\x31', '\x3', '\x31', 
		'\x5', '\x31', '\x2F9', '\n', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\a', '\x32', '\x300', '\n', '\x32', 
		'\f', '\x32', '\xE', '\x32', '\x303', '\v', '\x32', '\x3', '\x32', '\x5', 
		'\x32', '\x306', '\n', '\x32', '\x3', '\x33', '\x5', '\x33', '\x309', 
		'\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\a', '\x35', 
		'\x313', '\n', '\x35', '\f', '\x35', '\xE', '\x35', '\x316', '\v', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', 
		'\x321', '\n', '\x36', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x325', 
		'\n', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', 
		'\x32A', '\n', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x32E', 
		'\n', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x341', '\n', 
		'\x39', '\x3', ':', '\x3', ':', '\x5', ':', '\x345', '\n', ':', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\a', ';', '\x34B', '\n', ';', 
		'\f', ';', '\xE', ';', '\x34E', '\v', ';', '\x3', ';', '\x3', ';', '\x3', 
		'<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x5', '<', '\x357', 
		'\n', '<', '\x3', '<', '\x3', '<', '\x5', '<', '\x35B', '\n', '<', '\x5', 
		'<', '\x35D', '\n', '<', '\x3', '=', '\x3', '=', '\x5', '=', '\x361', 
		'\n', '=', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', 
		'\x5', '>', '\x368', '\n', '>', '\x3', '?', '\x3', '?', '\x5', '?', '\x36C', 
		'\n', '?', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x2', '\xF', 
		'\b', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 
		'X', '\x42', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 
		'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 
		'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x2', '\x3', '\x3', '\x2', 
		'\x17', '\x18', '\x2', '\x3C3', '\x2', '\x82', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x91', '\x3', '\x2', '\x2', '\x2', '\x6', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x9A', '\x3', '\x2', '\x2', '\x2', '\n', '\xAC', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\xAE', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x10', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\xD3', '\x3', '\x2', '\x2', '\x2', '\x14', '\xE1', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xF0', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xF6', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x121', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x123', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x136', '\x3', '\x2', '\x2', '\x2', 
		'\"', '\x14D', '\x3', '\x2', '\x2', '\x2', '$', '\x156', '\x3', '\x2', 
		'\x2', '\x2', '&', '\x15F', '\x3', '\x2', '\x2', '\x2', '(', '\x16A', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x17B', '\x3', '\x2', '\x2', '\x2', 
		',', '\x187', '\x3', '\x2', '\x2', '\x2', '.', '\x1AB', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x32', '\x1C3', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x1CD', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x38', '\x1D7', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x1E6', '\x3', '\x2', '\x2', '\x2', '<', '\x1E8', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x1F1', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x42', '\x1FE', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x209', '\x3', '\x2', '\x2', '\x2', '\x46', '\x214', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x21F', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x22A', '\x3', '\x2', '\x2', '\x2', 'L', '\x238', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x24C', '\x3', '\x2', '\x2', '\x2', 'P', '\x257', 
		'\x3', '\x2', '\x2', '\x2', 'R', '\x267', '\x3', '\x2', '\x2', '\x2', 
		'T', '\x275', '\x3', '\x2', '\x2', '\x2', 'V', '\x294', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\x2B6', '\x3', '\x2', '\x2', '\x2', 'Z', '\x2D1', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\x2D3', '\x3', '\x2', '\x2', '\x2', 
		'^', '\x2EC', '\x3', '\x2', '\x2', '\x2', '`', '\x2EE', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x2FC', '\x3', '\x2', '\x2', '\x2', '\x64', '\x308', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x30C', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x30F', '\x3', '\x2', '\x2', '\x2', 'j', '\x320', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\x322', '\x3', '\x2', '\x2', '\x2', 'n', '\x331', 
		'\x3', '\x2', '\x2', '\x2', 'p', '\x340', '\x3', '\x2', '\x2', '\x2', 
		'r', '\x342', '\x3', '\x2', '\x2', '\x2', 't', '\x346', '\x3', '\x2', 
		'\x2', '\x2', 'v', '\x35C', '\x3', '\x2', '\x2', '\x2', 'x', '\x360', 
		'\x3', '\x2', '\x2', '\x2', 'z', '\x367', '\x3', '\x2', '\x2', '\x2', 
		'|', '\x36B', '\x3', '\x2', '\x2', '\x2', '~', '\x36D', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x371', '\x3', '\x2', '\x2', '\x2', '\x82', '\x86', 
		'\x5', '\x4', '\x3', '\x2', '\x83', '\x85', '\x5', '\f', '\a', '\x2', 
		'\x84', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x87', '\x8C', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x86', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8B', '\x5', '\n', 
		'\x6', '\x2', '\x8A', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', 
		'\a', '\x2', '\x2', '\x3', '\x90', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x92', '\a', '\x6', '\x2', '\x2', '\x92', '\x93', '\x5', '\x6', 
		'\x4', '\x2', '\x93', '\x94', '\a', '(', '\x2', '\x2', '\x94', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x95', '\x99', '\x5', '\b', '\x5', '\x2', 
		'\x96', '\x97', '\a', '\'', '\x2', '\x2', '\x97', '\x99', '\x5', '\b', 
		'\x5', '\x2', '\x98', '\x95', '\x3', '\x2', '\x2', '\x2', '\x98', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x99', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x9B', '\b', '\x5', '\x1', '\x2', '\x9B', '\x9C', '\a', '\x41', 
		'\x2', '\x2', '\x9C', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', 
		'\f', '\x3', '\x2', '\x2', '\x9E', '\x9F', '\a', '\'', '\x2', '\x2', '\x9F', 
		'\xA1', '\a', '\x41', '\x2', '\x2', '\xA0', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xAD', '\x5', '\xE', '\b', '\x2', '\xA6', '\xAD', '\x5', 
		'\x18', '\r', '\x2', '\xA7', '\xAD', '\x5', ' ', '\x11', '\x2', '\xA8', 
		'\xAD', '\x5', ',', '\x17', '\x2', '\xA9', '\xAD', '\x5', '(', '\x15', 
		'\x2', '\xAA', '\xAD', '\x5', '*', '\x16', '\x2', '\xAB', '\xAD', '\x5', 
		'\x14', '\v', '\x2', '\xAC', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\xAC', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xAD', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '\xAF', '\a', '\a', '\x2', '\x2', '\xAF', '\xB2', '\x5', 
		'\x6', '\x4', '\x2', '\xB0', '\xB1', '\a', '\x38', '\x2', '\x2', '\xB1', 
		'\xB3', '\x5', 'n', '\x38', '\x2', '\xB2', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xB5', '\a', '(', '\x2', '\x2', '\xB5', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB8', '\x5', 'x', '=', '\x2', 
		'\xB7', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', 
		'\a', '\f', '\x2', '\x2', '\xBA', '\xBC', '\x5', 'n', '\x38', '\x2', '\xBB', 
		'\xBD', '\x5', '\x10', '\t', '\x2', '\xBC', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xC2', '\a', '$', '\x2', '\x2', '\xBF', 
		'\xC1', '\x5', '\x12', '\n', '\x2', '\xC0', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC5', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\xC5', '\xC6', '\a', '%', '\x2', '\x2', '\xC6', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\xC7', '\xC8', '\a', '\"', '\x2', '\x2', '\xC8', 
		'\xCD', '\x5', 'n', '\x38', '\x2', '\xC9', '\xCA', '\a', ',', '\x2', '\x2', 
		'\xCA', '\xCC', '\x5', 'n', '\x38', '\x2', '\xCB', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', 
		'\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xCD', '\x3', '\x2', 
		'\x2', '\x2', '\xD0', '\xD1', '\a', '#', '\x2', '\x2', '\xD1', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\xD2', '\xD4', '\x5', 'x', '=', '\x2', '\xD3', 
		'\xD2', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD7', '\a', 
		'\x15', '\x2', '\x2', '\xD6', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\xD8', '\xDA', '\a', '\v', '\x2', '\x2', '\xD9', '\xD8', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\x5', 'n', '\x38', 
		'\x2', '\xDC', '\xDD', '\a', '&', '\x2', '\x2', '\xDD', '\xDE', '\x5', 
		'p', '\x39', '\x2', '\xDE', '\xDF', '\a', ',', '\x2', '\x2', '\xDF', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\xE2', '\x5', 'x', '=', '\x2', '\xE1', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', '\x2', '\x2', 
		'\x2', '\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\a', 
		'\r', '\x2', '\x2', '\xE4', '\xE5', '\x5', 'n', '\x38', '\x2', '\xE5', 
		'\xE6', '\a', '&', '\x2', '\x2', '\xE6', '\xE7', '\x5', '\x6', '\x4', 
		'\x2', '\xE7', '\xEB', '\a', '$', '\x2', '\x2', '\xE8', '\xEA', '\x5', 
		'\x16', '\f', '\x2', '\xE9', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEA', 
		'\xED', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xE9', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xEE', '\x3', 
		'\x2', '\x2', '\x2', '\xED', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEE', 
		'\xEF', '\a', '%', '\x2', '\x2', '\xEF', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xF0', '\xF1', '\x5', 'n', '\x38', '\x2', '\xF1', '\xF2', '\a', 
		'\x31', '\x2', '\x2', '\xF2', '\xF3', '\x5', 'z', '>', '\x2', '\xF3', 
		'\xF4', '\a', ',', '\x2', '\x2', '\xF4', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xF5', '\xF7', '\x5', 'x', '=', '\x2', '\xF6', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', '\a', '\xE', '\x2', 
		'\x2', '\xF9', '\xFB', '\x5', 'n', '\x38', '\x2', '\xFA', '\xFC', '\x5', 
		'\x10', '\t', '\x2', '\xFB', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFB', 
		'\xFC', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\xFD', '\x101', '\a', '$', '\x2', '\x2', '\xFE', '\x100', '\x5', 
		'\x1A', '\xE', '\x2', '\xFF', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\x103', '\x3', '\x2', '\x2', '\x2', '\x101', '\xFF', '\x3', '\x2', '\x2', 
		'\x2', '\x101', '\x102', '\x3', '\x2', '\x2', '\x2', '\x102', '\x104', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x101', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x105', '\a', '%', '\x2', '\x2', '\x105', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x106', '\x108', '\x5', 'x', '=', '\x2', '\x107', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x107', '\x108', '\x3', '\x2', '\x2', '\x2', 
		'\x108', '\x109', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\x5', 
		'n', '\x38', '\x2', '\x10A', '\x10B', '\a', ',', '\x2', '\x2', '\x10B', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10E', '\x5', 'x', '=', 
		'\x2', '\x10D', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', 
		'\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\x10F', '\x110', '\x5', 'n', '\x38', '\x2', '\x110', '\x114', '\a', '$', 
		'\x2', '\x2', '\x111', '\x113', '\x5', '\x12', '\n', '\x2', '\x112', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\x113', '\x116', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x112', '\x3', '\x2', '\x2', '\x2', '\x114', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\x115', '\x117', '\x3', '\x2', '\x2', '\x2', '\x116', 
		'\x114', '\x3', '\x2', '\x2', '\x2', '\x117', '\x118', '\a', '%', '\x2', 
		'\x2', '\x118', '\x119', '\a', ',', '\x2', '\x2', '\x119', '\x122', '\x3', 
		'\x2', '\x2', '\x2', '\x11A', '\x11C', '\x5', 'x', '=', '\x2', '\x11B', 
		'\x11A', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\x3', '\x2', '\x2', 
		'\x2', '\x11C', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', 
		'\x5', 'n', '\x38', '\x2', '\x11E', '\x11F', '\x5', '\x1C', '\xF', '\x2', 
		'\x11F', '\x120', '\a', ',', '\x2', '\x2', '\x120', '\x122', '\x3', '\x2', 
		'\x2', '\x2', '\x121', '\x107', '\x3', '\x2', '\x2', '\x2', '\x121', '\x10D', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\a', ' ', 
		'\x2', '\x2', '\x124', '\x129', '\x5', '\x1E', '\x10', '\x2', '\x125', 
		'\x126', '\a', ',', '\x2', '\x2', '\x126', '\x128', '\x5', '\x1E', '\x10', 
		'\x2', '\x127', '\x125', '\x3', '\x2', '\x2', '\x2', '\x128', '\x12B', 
		'\x3', '\x2', '\x2', '\x2', '\x129', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12C', '\x3', 
		'\x2', '\x2', '\x2', '\x12B', '\x129', '\x3', '\x2', '\x2', '\x2', '\x12C', 
		'\x12D', '\a', '!', '\x2', '\x2', '\x12D', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x130', '\a', '\x15', '\x2', '\x2', '\x12F', '\x12E', 
		'\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\x132', '\x3', '\x2', '\x2', '\x2', '\x131', '\x133', '\a', 
		'\v', '\x2', '\x2', '\x132', '\x131', '\x3', '\x2', '\x2', '\x2', '\x132', 
		'\x133', '\x3', '\x2', '\x2', '\x2', '\x133', '\x134', '\x3', '\x2', '\x2', 
		'\x2', '\x134', '\x135', '\x5', 'p', '\x39', '\x2', '\x135', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x136', '\x138', '\a', '\xF', '\x2', '\x2', '\x137', 
		'\x139', '\x5', '\x10', '\t', '\x2', '\x138', '\x137', '\x3', '\x2', '\x2', 
		'\x2', '\x138', '\x139', '\x3', '\x2', '\x2', '\x2', '\x139', '\x140', 
		'\x3', '\x2', '\x2', '\x2', '\x13A', '\x13C', '\x5', '\x6', '\x4', '\x2', 
		'\x13B', '\x13D', '\x5', 't', ';', '\x2', '\x13C', '\x13B', '\x3', '\x2', 
		'\x2', '\x2', '\x13C', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13E', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x13F', '\a', '\x12', '\x2', '\x2', 
		'\x13F', '\x141', '\x3', '\x2', '\x2', '\x2', '\x140', '\x13A', '\x3', 
		'\x2', '\x2', '\x2', '\x140', '\x141', '\x3', '\x2', '\x2', '\x2', '\x141', 
		'\x142', '\x3', '\x2', '\x2', '\x2', '\x142', '\x144', '\x5', '\x6', '\x4', 
		'\x2', '\x143', '\x145', '\x5', 't', ';', '\x2', '\x144', '\x143', '\x3', 
		'\x2', '\x2', '\x2', '\x144', '\x145', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'\x147', '\x3', '\x2', '\x2', '\x2', '\x146', '\x148', '\x5', '$', '\x13', 
		'\x2', '\x147', '\x146', '\x3', '\x2', '\x2', '\x2', '\x147', '\x148', 
		'\x3', '\x2', '\x2', '\x2', '\x148', '\x14B', '\x3', '\x2', '\x2', '\x2', 
		'\x149', '\x14C', '\a', '(', '\x2', '\x2', '\x14A', '\x14C', '\x5', '\"', 
		'\x12', '\x2', '\x14B', '\x149', '\x3', '\x2', '\x2', '\x2', '\x14B', 
		'\x14A', '\x3', '\x2', '\x2', '\x2', '\x14C', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x14D', '\x151', '\a', '$', '\x2', '\x2', '\x14E', '\x150', '\x5', 
		',', '\x17', '\x2', '\x14F', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x150', 
		'\x153', '\x3', '\x2', '\x2', '\x2', '\x151', '\x14F', '\x3', '\x2', '\x2', 
		'\x2', '\x151', '\x152', '\x3', '\x2', '\x2', '\x2', '\x152', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x153', '\x151', '\x3', '\x2', '\x2', '\x2', 
		'\x154', '\x155', '\a', '%', '\x2', '\x2', '\x155', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x156', '\x157', '\a', '\x11', '\x2', '\x2', '\x157', '\x15C', 
		'\x5', '&', '\x14', '\x2', '\x158', '\x159', '\a', ',', '\x2', '\x2', 
		'\x159', '\x15B', '\x5', '&', '\x14', '\x2', '\x15A', '\x158', '\x3', 
		'\x2', '\x2', '\x2', '\x15B', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x15C', 
		'\x15A', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15D', '\x3', '\x2', '\x2', 
		'\x2', '\x15D', '%', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x15C', '\x3', 
		'\x2', '\x2', '\x2', '\x15F', '\x160', '\x5', 'n', '\x38', '\x2', '\x160', 
		'\x161', '\a', '&', '\x2', '\x2', '\x161', '\x166', '\x5', 'p', '\x39', 
		'\x2', '\x162', '\x163', '\a', '-', '\x2', '\x2', '\x163', '\x165', '\x5', 
		'p', '\x39', '\x2', '\x164', '\x162', '\x3', '\x2', '\x2', '\x2', '\x165', 
		'\x168', '\x3', '\x2', '\x2', '\x2', '\x166', '\x164', '\x3', '\x2', '\x2', 
		'\x2', '\x166', '\x167', '\x3', '\x2', '\x2', '\x2', '\x167', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x168', '\x166', '\x3', '\x2', '\x2', '\x2', '\x169', 
		'\x16B', '\x5', 'x', '=', '\x2', '\x16A', '\x169', '\x3', '\x2', '\x2', 
		'\x2', '\x16A', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16C', 
		'\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', '\a', '\x10', '\x2', '\x2', 
		'\x16D', '\x16F', '\x5', 'n', '\x38', '\x2', '\x16E', '\x170', '\x5', 
		'\x10', '\t', '\x2', '\x16F', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x16F', 
		'\x170', '\x3', '\x2', '\x2', '\x2', '\x170', '\x171', '\x3', '\x2', '\x2', 
		'\x2', '\x171', '\x175', '\a', '$', '\x2', '\x2', '\x172', '\x174', '\x5', 
		',', '\x17', '\x2', '\x173', '\x172', '\x3', '\x2', '\x2', '\x2', '\x174', 
		'\x177', '\x3', '\x2', '\x2', '\x2', '\x175', '\x173', '\x3', '\x2', '\x2', 
		'\x2', '\x175', '\x176', '\x3', '\x2', '\x2', '\x2', '\x176', '\x178', 
		'\x3', '\x2', '\x2', '\x2', '\x177', '\x175', '\x3', '\x2', '\x2', '\x2', 
		'\x178', '\x179', '\a', '%', '\x2', '\x2', '\x179', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x17A', '\x17C', '\x5', 'x', '=', '\x2', '\x17B', '\x17A', 
		'\x3', '\x2', '\x2', '\x2', '\x17B', '\x17C', '\x3', '\x2', '\x2', '\x2', 
		'\x17C', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17E', '\a', 
		'\x16', '\x2', '\x2', '\x17E', '\x180', '\x5', 'n', '\x38', '\x2', '\x17F', 
		'\x181', '\x5', '\x10', '\t', '\x2', '\x180', '\x17F', '\x3', '\x2', '\x2', 
		'\x2', '\x180', '\x181', '\x3', '\x2', '\x2', '\x2', '\x181', '\x182', 
		'\x3', '\x2', '\x2', '\x2', '\x182', '\x183', '\a', '\x31', '\x2', '\x2', 
		'\x183', '\x184', '\x5', 'p', '\x39', '\x2', '\x184', '\x185', '\a', '(', 
		'\x2', '\x2', '\x185', '+', '\x3', '\x2', '\x2', '\x2', '\x186', '\x188', 
		'\x5', 'x', '=', '\x2', '\x187', '\x186', '\x3', '\x2', '\x2', '\x2', 
		'\x187', '\x188', '\x3', '\x2', '\x2', '\x2', '\x188', '\x18A', '\x3', 
		'\x2', '\x2', '\x2', '\x189', '\x18B', '\a', '\n', '\x2', '\x2', '\x18A', 
		'\x189', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x18B', '\x3', '\x2', '\x2', 
		'\x2', '\x18B', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18D', 
		'\a', '\x14', '\x2', '\x2', '\x18D', '\x18F', '\x5', 'n', '\x38', '\x2', 
		'\x18E', '\x190', '\x5', '\x10', '\t', '\x2', '\x18F', '\x18E', '\x3', 
		'\x2', '\x2', '\x2', '\x18F', '\x190', '\x3', '\x2', '\x2', '\x2', '\x190', 
		'\x191', '\x3', '\x2', '\x2', '\x2', '\x191', '\x19A', '\a', ' ', '\x2', 
		'\x2', '\x192', '\x197', '\x5', '.', '\x18', '\x2', '\x193', '\x194', 
		'\a', ',', '\x2', '\x2', '\x194', '\x196', '\x5', '.', '\x18', '\x2', 
		'\x195', '\x193', '\x3', '\x2', '\x2', '\x2', '\x196', '\x199', '\x3', 
		'\x2', '\x2', '\x2', '\x197', '\x195', '\x3', '\x2', '\x2', '\x2', '\x197', 
		'\x198', '\x3', '\x2', '\x2', '\x2', '\x198', '\x19B', '\x3', '\x2', '\x2', 
		'\x2', '\x199', '\x197', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x192', 
		'\x3', '\x2', '\x2', '\x2', '\x19A', '\x19B', '\x3', '\x2', '\x2', '\x2', 
		'\x19B', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19F', '\a', 
		'!', '\x2', '\x2', '\x19D', '\x19E', '\a', '&', '\x2', '\x2', '\x19E', 
		'\x1A0', '\x5', 'p', '\x39', '\x2', '\x19F', '\x19D', '\x3', '\x2', '\x2', 
		'\x2', '\x19F', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A1', 
		'\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A2', '\x5', '\x30', '\x19', '\x2', 
		'\x1A2', '-', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A4', '\x5', 'n', 
		'\x38', '\x2', '\x1A4', '\x1A5', '\a', '&', '\x2', '\x2', '\x1A5', '\x1A6', 
		'\x5', 'p', '\x39', '\x2', '\x1A6', '\x1AC', '\x3', '\x2', '\x2', '\x2', 
		'\x1A7', '\x1A9', '\x5', 'v', '<', '\x2', '\x1A8', '\x1A7', '\x3', '\x2', 
		'\x2', '\x2', '\x1A8', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AA', 
		'\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AC', '\a', '\x1A', '\x2', '\x2', 
		'\x1AB', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1A8', '\x3', 
		'\x2', '\x2', '\x2', '\x1AC', '/', '\x3', '\x2', '\x2', '\x2', '\x1AD', 
		'\x1B0', '\x5', '\x32', '\x1A', '\x2', '\x1AE', '\x1B0', '\a', '(', '\x2', 
		'\x2', '\x1AF', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1AE', 
		'\x3', '\x2', '\x2', '\x2', '\x1B0', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x1B1', '\x1B5', '\a', '$', '\x2', '\x2', '\x1B2', '\x1B4', '\x5', '\x34', 
		'\x1B', '\x2', '\x1B3', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B4', 
		'\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B3', '\x3', '\x2', '\x2', 
		'\x2', '\x1B5', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B8', 
		'\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B5', '\x3', '\x2', '\x2', '\x2', 
		'\x1B8', '\x1B9', '\x5', '>', ' ', '\x2', '\x1B9', '\x1BA', '\a', '%', 
		'\x2', '\x2', '\x1BA', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BF', 
		'\a', '$', '\x2', '\x2', '\x1BC', '\x1BE', '\x5', '\x34', '\x1B', '\x2', 
		'\x1BD', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1C1', '\x3', 
		'\x2', '\x2', '\x2', '\x1BF', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BF', 
		'\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C2', '\x3', '\x2', '\x2', 
		'\x2', '\x1C1', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C4', 
		'\a', '%', '\x2', '\x2', '\x1C3', '\x1B1', '\x3', '\x2', '\x2', '\x2', 
		'\x1C3', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x1C5', '\x1CE', '\a', '(', '\x2', '\x2', '\x1C6', 
		'\x1C7', '\x5', '>', ' ', '\x2', '\x1C7', '\x1C8', '\a', '(', '\x2', '\x2', 
		'\x1C8', '\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1CE', '\x5', 
		'Z', '.', '\x2', '\x1CA', '\x1CE', '\x5', 'l', '\x37', '\x2', '\x1CB', 
		'\x1CE', '\x5', '\x36', '\x1C', '\x2', '\x1CC', '\x1CE', '\x5', '<', '\x1F', 
		'\x2', '\x1CD', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1C6', 
		'\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1C9', '\x3', '\x2', '\x2', '\x2', 
		'\x1CD', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CB', '\x3', 
		'\x2', '\x2', '\x2', '\x1CD', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CE', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1D0', '\x5', ':', '\x1E', 
		'\x2', '\x1D0', '\x1D1', '\x5', '\x38', '\x1D', '\x2', '\x1D1', '\x1D2', 
		'\x5', '>', ' ', '\x2', '\x1D2', '\x1D3', '\a', '(', '\x2', '\x2', '\x1D3', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D8', '\a', '\x31', '\x2', 
		'\x2', '\x1D5', '\x1D8', '\a', '.', '\x2', '\x2', '\x1D6', '\x1D8', '\a', 
		'\x30', '\x2', '\x2', '\x1D7', '\x1D4', '\x3', '\x2', '\x2', '\x2', '\x1D7', 
		'\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D6', '\x3', '\x2', '\x2', 
		'\x2', '\x1D8', '\x39', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DA', 
		'\x5', 'X', '-', '\x2', '\x1DA', '\x1DB', '\a', '+', '\x2', '\x2', '\x1DB', 
		'\x1DC', '\x5', 'n', '\x38', '\x2', '\x1DC', '\x1E7', '\x3', '\x2', '\x2', 
		'\x2', '\x1DD', '\x1E2', '\x5', '\x6', '\x4', '\x2', '\x1DE', '\x1DF', 
		'\x5', 't', ';', '\x2', '\x1DF', '\x1E0', '\a', '\'', '\x2', '\x2', '\x1E0', 
		'\x1E1', '\x5', '\x6', '\x4', '\x2', '\x1E1', '\x1E3', '\x3', '\x2', '\x2', 
		'\x2', '\x1E2', '\x1DE', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E3', 
		'\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E7', '\x3', '\x2', '\x2', '\x2', 
		'\x1E4', '\x1E5', '\a', '\x34', '\x2', '\x2', '\x1E5', '\x1E7', '\x5', 
		'V', ',', '\x2', '\x1E6', '\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1E6', 
		'\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E4', '\x3', '\x2', '\x2', 
		'\x2', '\x1E7', ';', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E9', '\a', 
		'\x1F', '\x2', '\x2', '\x1E9', '\x1EA', '\x5', '>', ' ', '\x2', '\x1EA', 
		'\x1EB', '\x5', '\x32', '\x1A', '\x2', '\x1EB', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x1EC', '\x1F2', '\x5', '@', '!', '\x2', '\x1ED', '\x1EF', '\a', 
		'\x1C', '\x2', '\x2', '\x1EE', '\x1F0', '\x5', '@', '!', '\x2', '\x1EF', 
		'\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1F0', '\x3', '\x2', '\x2', 
		'\x2', '\x1F0', '\x1F2', '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1EC', 
		'\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1ED', '\x3', '\x2', '\x2', '\x2', 
		'\x1F2', '?', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F4', '\b', '!', 
		'\x1', '\x2', '\x1F4', '\x1F5', '\x5', '\x42', '\"', '\x2', '\x1F5', '\x1FB', 
		'\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F7', '\f', '\x3', '\x2', '\x2', 
		'\x1F7', '\x1F8', '\a', '\x39', '\x2', '\x2', '\x1F8', '\x1FA', '\x5', 
		'\x42', '\"', '\x2', '\x1F9', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1FA', 
		'\x1FD', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1F9', '\x3', '\x2', '\x2', 
		'\x2', '\x1FB', '\x1FC', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FB', '\x3', '\x2', '\x2', '\x2', 
		'\x1FE', '\x1FF', '\b', '\"', '\x1', '\x2', '\x1FF', '\x200', '\x5', '\x44', 
		'#', '\x2', '\x200', '\x206', '\x3', '\x2', '\x2', '\x2', '\x201', '\x202', 
		'\f', '\x3', '\x2', '\x2', '\x202', '\x203', '\a', ':', '\x2', '\x2', 
		'\x203', '\x205', '\x5', '\x44', '#', '\x2', '\x204', '\x201', '\x3', 
		'\x2', '\x2', '\x2', '\x205', '\x208', '\x3', '\x2', '\x2', '\x2', '\x206', 
		'\x204', '\x3', '\x2', '\x2', '\x2', '\x206', '\x207', '\x3', '\x2', '\x2', 
		'\x2', '\x207', '\x43', '\x3', '\x2', '\x2', '\x2', '\x208', '\x206', 
		'\x3', '\x2', '\x2', '\x2', '\x209', '\x20A', '\b', '#', '\x1', '\x2', 
		'\x20A', '\x20B', '\x5', '\x46', '$', '\x2', '\x20B', '\x211', '\x3', 
		'\x2', '\x2', '\x2', '\x20C', '\x20D', '\f', '\x3', '\x2', '\x2', '\x20D', 
		'\x20E', '\a', ';', '\x2', '\x2', '\x20E', '\x210', '\x5', '\x46', '$', 
		'\x2', '\x20F', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x210', '\x213', 
		'\x3', '\x2', '\x2', '\x2', '\x211', '\x20F', '\x3', '\x2', '\x2', '\x2', 
		'\x211', '\x212', '\x3', '\x2', '\x2', '\x2', '\x212', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x213', '\x211', '\x3', '\x2', '\x2', '\x2', '\x214', 
		'\x215', '\b', '$', '\x1', '\x2', '\x215', '\x216', '\x5', 'H', '%', '\x2', 
		'\x216', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x217', '\x218', '\f', 
		'\x3', '\x2', '\x2', '\x218', '\x219', '\a', '<', '\x2', '\x2', '\x219', 
		'\x21B', '\x5', 'H', '%', '\x2', '\x21A', '\x217', '\x3', '\x2', '\x2', 
		'\x2', '\x21B', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x21A', 
		'\x3', '\x2', '\x2', '\x2', '\x21C', '\x21D', '\x3', '\x2', '\x2', '\x2', 
		'\x21D', 'G', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x21C', '\x3', '\x2', 
		'\x2', '\x2', '\x21F', '\x220', '\b', '%', '\x1', '\x2', '\x220', '\x221', 
		'\x5', 'J', '&', '\x2', '\x221', '\x227', '\x3', '\x2', '\x2', '\x2', 
		'\x222', '\x223', '\f', '\x3', '\x2', '\x2', '\x223', '\x224', '\a', '*', 
		'\x2', '\x2', '\x224', '\x226', '\x5', 'J', '&', '\x2', '\x225', '\x222', 
		'\x3', '\x2', '\x2', '\x2', '\x226', '\x229', '\x3', '\x2', '\x2', '\x2', 
		'\x227', '\x225', '\x3', '\x2', '\x2', '\x2', '\x227', '\x228', '\x3', 
		'\x2', '\x2', '\x2', '\x228', 'I', '\x3', '\x2', '\x2', '\x2', '\x229', 
		'\x227', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x22B', '\b', '&', '\x1', 
		'\x2', '\x22B', '\x22C', '\x5', 'L', '\'', '\x2', '\x22C', '\x235', '\x3', 
		'\x2', '\x2', '\x2', '\x22D', '\x22E', '\f', '\x4', '\x2', '\x2', '\x22E', 
		'\x22F', '\a', '\x33', '\x2', '\x2', '\x22F', '\x234', '\x5', 'L', '\'', 
		'\x2', '\x230', '\x231', '\f', '\x3', '\x2', '\x2', '\x231', '\x232', 
		'\a', '\x32', '\x2', '\x2', '\x232', '\x234', '\x5', 'L', '\'', '\x2', 
		'\x233', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x233', '\x230', '\x3', 
		'\x2', '\x2', '\x2', '\x234', '\x237', '\x3', '\x2', '\x2', '\x2', '\x235', 
		'\x233', '\x3', '\x2', '\x2', '\x2', '\x235', '\x236', '\x3', '\x2', '\x2', 
		'\x2', '\x236', 'K', '\x3', '\x2', '\x2', '\x2', '\x237', '\x235', '\x3', 
		'\x2', '\x2', '\x2', '\x238', '\x239', '\b', '\'', '\x1', '\x2', '\x239', 
		'\x23A', '\x5', 'N', '(', '\x2', '\x23A', '\x249', '\x3', '\x2', '\x2', 
		'\x2', '\x23B', '\x23C', '\f', '\x6', '\x2', '\x2', '\x23C', '\x23D', 
		'\a', '\"', '\x2', '\x2', '\x23D', '\x248', '\x5', 'N', '(', '\x2', '\x23E', 
		'\x23F', '\f', '\x5', '\x2', '\x2', '\x23F', '\x240', '\a', '#', '\x2', 
		'\x2', '\x240', '\x248', '\x5', 'N', '(', '\x2', '\x241', '\x242', '\f', 
		'\x4', '\x2', '\x2', '\x242', '\x243', '\a', '=', '\x2', '\x2', '\x243', 
		'\x248', '\x5', 'N', '(', '\x2', '\x244', '\x245', '\f', '\x3', '\x2', 
		'\x2', '\x245', '\x246', '\a', '>', '\x2', '\x2', '\x246', '\x248', '\x5', 
		'N', '(', '\x2', '\x247', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x247', 
		'\x23E', '\x3', '\x2', '\x2', '\x2', '\x247', '\x241', '\x3', '\x2', '\x2', 
		'\x2', '\x247', '\x244', '\x3', '\x2', '\x2', '\x2', '\x248', '\x24B', 
		'\x3', '\x2', '\x2', '\x2', '\x249', '\x247', '\x3', '\x2', '\x2', '\x2', 
		'\x249', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x24A', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x24B', '\x249', '\x3', '\x2', '\x2', '\x2', '\x24C', '\x24D', 
		'\b', '(', '\x1', '\x2', '\x24D', '\x24E', '\x5', 'P', ')', '\x2', '\x24E', 
		'\x254', '\x3', '\x2', '\x2', '\x2', '\x24F', '\x250', '\f', '\x3', '\x2', 
		'\x2', '\x250', '\x251', '\a', '\x38', '\x2', '\x2', '\x251', '\x253', 
		'\x5', 'p', '\x39', '\x2', '\x252', '\x24F', '\x3', '\x2', '\x2', '\x2', 
		'\x253', '\x256', '\x3', '\x2', '\x2', '\x2', '\x254', '\x252', '\x3', 
		'\x2', '\x2', '\x2', '\x254', '\x255', '\x3', '\x2', '\x2', '\x2', '\x255', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x256', '\x254', '\x3', '\x2', '\x2', 
		'\x2', '\x257', '\x258', '\b', ')', '\x1', '\x2', '\x258', '\x259', '\x5', 
		'R', '*', '\x2', '\x259', '\x264', '\x3', '\x2', '\x2', '\x2', '\x25A', 
		'\x25B', '\f', '\x4', '\x2', '\x2', '\x25B', '\x25C', '\x5', '~', '@', 
		'\x2', '\x25C', '\x25D', '\x5', 'R', '*', '\x2', '\x25D', '\x263', '\x3', 
		'\x2', '\x2', '\x2', '\x25E', '\x25F', '\f', '\x3', '\x2', '\x2', '\x25F', 
		'\x260', '\x5', '\x80', '\x41', '\x2', '\x260', '\x261', '\x5', 'R', '*', 
		'\x2', '\x261', '\x263', '\x3', '\x2', '\x2', '\x2', '\x262', '\x25A', 
		'\x3', '\x2', '\x2', '\x2', '\x262', '\x25E', '\x3', '\x2', '\x2', '\x2', 
		'\x263', '\x266', '\x3', '\x2', '\x2', '\x2', '\x264', '\x262', '\x3', 
		'\x2', '\x2', '\x2', '\x264', '\x265', '\x3', '\x2', '\x2', '\x2', '\x265', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x266', '\x264', '\x3', '\x2', '\x2', 
		'\x2', '\x267', '\x268', '\b', '*', '\x1', '\x2', '\x268', '\x269', '\x5', 
		'T', '+', '\x2', '\x269', '\x272', '\x3', '\x2', '\x2', '\x2', '\x26A', 
		'\x26B', '\f', '\x4', '\x2', '\x2', '\x26B', '\x26C', '\a', '-', '\x2', 
		'\x2', '\x26C', '\x271', '\x5', 'T', '+', '\x2', '\x26D', '\x26E', '\f', 
		'\x3', '\x2', '\x2', '\x26E', '\x26F', '\a', '/', '\x2', '\x2', '\x26F', 
		'\x271', '\x5', 'T', '+', '\x2', '\x270', '\x26A', '\x3', '\x2', '\x2', 
		'\x2', '\x270', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x271', '\x274', 
		'\x3', '\x2', '\x2', '\x2', '\x272', '\x270', '\x3', '\x2', '\x2', '\x2', 
		'\x272', '\x273', '\x3', '\x2', '\x2', '\x2', '\x273', 'S', '\x3', '\x2', 
		'\x2', '\x2', '\x274', '\x272', '\x3', '\x2', '\x2', '\x2', '\x275', '\x276', 
		'\b', '+', '\x1', '\x2', '\x276', '\x277', '\x5', 'V', ',', '\x2', '\x277', 
		'\x283', '\x3', '\x2', '\x2', '\x2', '\x278', '\x279', '\f', '\x5', '\x2', 
		'\x2', '\x279', '\x27A', '\a', '\x34', '\x2', '\x2', '\x27A', '\x282', 
		'\x5', 'V', ',', '\x2', '\x27B', '\x27C', '\f', '\x4', '\x2', '\x2', '\x27C', 
		'\x27D', '\a', '\x35', '\x2', '\x2', '\x27D', '\x282', '\x5', 'V', ',', 
		'\x2', '\x27E', '\x27F', '\f', '\x3', '\x2', '\x2', '\x27F', '\x280', 
		'\a', '\x36', '\x2', '\x2', '\x280', '\x282', '\x5', 'V', ',', '\x2', 
		'\x281', '\x278', '\x3', '\x2', '\x2', '\x2', '\x281', '\x27B', '\x3', 
		'\x2', '\x2', '\x2', '\x281', '\x27E', '\x3', '\x2', '\x2', '\x2', '\x282', 
		'\x285', '\x3', '\x2', '\x2', '\x2', '\x283', '\x281', '\x3', '\x2', '\x2', 
		'\x2', '\x283', '\x284', '\x3', '\x2', '\x2', '\x2', '\x284', 'U', '\x3', 
		'\x2', '\x2', '\x2', '\x285', '\x283', '\x3', '\x2', '\x2', '\x2', '\x286', 
		'\x295', '\x5', 'X', '-', '\x2', '\x287', '\x288', '\a', '/', '\x2', '\x2', 
		'\x288', '\x295', '\x5', 'V', ',', '\x2', '\x289', '\x28A', '\a', '\x37', 
		'\x2', '\x2', '\x28A', '\x295', '\x5', 'V', ',', '\x2', '\x28B', '\x28D', 
		'\a', '*', '\x2', '\x2', '\x28C', '\x28E', '\a', '\v', '\x2', '\x2', '\x28D', 
		'\x28C', '\x3', '\x2', '\x2', '\x2', '\x28D', '\x28E', '\x3', '\x2', '\x2', 
		'\x2', '\x28E', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x28F', '\x295', 
		'\x5', 'V', ',', '\x2', '\x290', '\x291', '\a', '\x19', '\x2', '\x2', 
		'\x291', '\x295', '\x5', 'V', ',', '\x2', '\x292', '\x293', '\a', '\x34', 
		'\x2', '\x2', '\x293', '\x295', '\x5', 'V', ',', '\x2', '\x294', '\x286', 
		'\x3', '\x2', '\x2', '\x2', '\x294', '\x287', '\x3', '\x2', '\x2', '\x2', 
		'\x294', '\x289', '\x3', '\x2', '\x2', '\x2', '\x294', '\x28B', '\x3', 
		'\x2', '\x2', '\x2', '\x294', '\x290', '\x3', '\x2', '\x2', '\x2', '\x294', 
		'\x292', '\x3', '\x2', '\x2', '\x2', '\x295', 'W', '\x3', '\x2', '\x2', 
		'\x2', '\x296', '\x297', '\b', '-', '\x1', '\x2', '\x297', '\x298', '\a', 
		' ', '\x2', '\x2', '\x298', '\x299', '\x5', '>', ' ', '\x2', '\x299', 
		'\x29A', '\a', '!', '\x2', '\x2', '\x29A', '\x2B7', '\x3', '\x2', '\x2', 
		'\x2', '\x29B', '\x2B7', '\x5', 'z', '>', '\x2', '\x29C', '\x2B7', '\a', 
		'\x1A', '\x2', '\x2', '\x29D', '\x2A2', '\x5', '\x6', '\x4', '\x2', '\x29E', 
		'\x29F', '\x5', 't', ';', '\x2', '\x29F', '\x2A0', '\a', '\'', '\x2', 
		'\x2', '\x2A0', '\x2A1', '\x5', '\x6', '\x4', '\x2', '\x2A1', '\x2A3', 
		'\x3', '\x2', '\x2', '\x2', '\x2A2', '\x29E', '\x3', '\x2', '\x2', '\x2', 
		'\x2A2', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x2A3', '\x2A5', '\x3', 
		'\x2', '\x2', '\x2', '\x2A4', '\x2A6', '\x5', 't', ';', '\x2', '\x2A5', 
		'\x2A4', '\x3', '\x2', '\x2', '\x2', '\x2A5', '\x2A6', '\x3', '\x2', '\x2', 
		'\x2', '\x2A6', '\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2A7', '\x2A9', 
		'\a', ' ', '\x2', '\x2', '\x2A8', '\x2AA', '\x5', '\x62', '\x32', '\x2', 
		'\x2A9', '\x2A8', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AA', '\x3', 
		'\x2', '\x2', '\x2', '\x2AA', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x2AB', 
		'\x2AC', '\a', '!', '\x2', '\x2', '\x2AC', '\x2B7', '\x3', '\x2', '\x2', 
		'\x2', '\x2AD', '\x2B2', '\x5', '\x6', '\x4', '\x2', '\x2AE', '\x2AF', 
		'\x5', 't', ';', '\x2', '\x2AF', '\x2B0', '\a', '\'', '\x2', '\x2', '\x2B0', 
		'\x2B1', '\x5', '\x6', '\x4', '\x2', '\x2B1', '\x2B3', '\x3', '\x2', '\x2', 
		'\x2', '\x2B2', '\x2AE', '\x3', '\x2', '\x2', '\x2', '\x2B2', '\x2B3', 
		'\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B7', '\x3', '\x2', '\x2', '\x2', 
		'\x2B4', '\x2B7', '\x5', 'h', '\x35', '\x2', '\x2B5', '\x2B7', '\x5', 
		'Z', '.', '\x2', '\x2B6', '\x296', '\x3', '\x2', '\x2', '\x2', '\x2B6', 
		'\x29B', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x29C', '\x3', '\x2', '\x2', 
		'\x2', '\x2B6', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2AD', 
		'\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2B4', '\x3', '\x2', '\x2', '\x2', 
		'\x2B6', '\x2B5', '\x3', '\x2', '\x2', '\x2', '\x2B7', '\x2C9', '\x3', 
		'\x2', '\x2', '\x2', '\x2B8', '\x2B9', '\f', '\b', '\x2', '\x2', '\x2B9', 
		'\x2BA', '\a', '+', '\x2', '\x2', '\x2BA', '\x2BC', '\x5', 'n', '\x38', 
		'\x2', '\x2BB', '\x2BD', '\x5', 't', ';', '\x2', '\x2BC', '\x2BB', '\x3', 
		'\x2', '\x2', '\x2', '\x2BC', '\x2BD', '\x3', '\x2', '\x2', '\x2', '\x2BD', 
		'\x2BE', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2C0', '\a', ' ', '\x2', 
		'\x2', '\x2BF', '\x2C1', '\x5', '\x62', '\x32', '\x2', '\x2C0', '\x2BF', 
		'\x3', '\x2', '\x2', '\x2', '\x2C0', '\x2C1', '\x3', '\x2', '\x2', '\x2', 
		'\x2C1', '\x2C2', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2C3', '\a', 
		'!', '\x2', '\x2', '\x2C3', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2C4', 
		'\x2C5', '\f', '\a', '\x2', '\x2', '\x2C5', '\x2C6', '\a', '+', '\x2', 
		'\x2', '\x2C6', '\x2C8', '\x5', 'n', '\x38', '\x2', '\x2C7', '\x2B8', 
		'\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2C4', '\x3', '\x2', '\x2', '\x2', 
		'\x2C8', '\x2CB', '\x3', '\x2', '\x2', '\x2', '\x2C9', '\x2C7', '\x3', 
		'\x2', '\x2', '\x2', '\x2C9', '\x2CA', '\x3', '\x2', '\x2', '\x2', '\x2CA', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x2CB', '\x2C9', '\x3', '\x2', '\x2', 
		'\x2', '\x2CC', '\x2CE', '\a', '\x15', '\x2', '\x2', '\x2CD', '\x2CC', 
		'\x3', '\x2', '\x2', '\x2', '\x2CD', '\x2CE', '\x3', '\x2', '\x2', '\x2', 
		'\x2CE', '\x2CF', '\x3', '\x2', '\x2', '\x2', '\x2CF', '\x2D2', '\x5', 
		'\x32', '\x1A', '\x2', '\x2D0', '\x2D2', '\x5', '\\', '/', '\x2', '\x2D1', 
		'\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2D0', '\x3', '\x2', '\x2', 
		'\x2', '\x2D2', '[', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2D4', '\a', 
		'\x1D', '\x2', '\x2', '\x2D4', '\x2D5', '\x5', '^', '\x30', '\x2', '\x2D5', 
		'\x2DB', '\x5', '\x32', '\x1A', '\x2', '\x2D6', '\x2D9', '\a', '\x1E', 
		'\x2', '\x2', '\x2D7', '\x2DA', '\x5', '\x32', '\x1A', '\x2', '\x2D8', 
		'\x2DA', '\x5', '\\', '/', '\x2', '\x2D9', '\x2D7', '\x3', '\x2', '\x2', 
		'\x2', '\x2D9', '\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2DA', '\x2DC', 
		'\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2D6', '\x3', '\x2', '\x2', '\x2', 
		'\x2DB', '\x2DC', '\x3', '\x2', '\x2', '\x2', '\x2DC', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x2DD', '\x2ED', '\x5', '>', ' ', '\x2', '\x2DE', '\x2DF', 
		'\a', '\x13', '\x2', '\x2', '\x2DF', '\x2E4', '\x5', '\x6', '\x4', '\x2', 
		'\x2E0', '\x2E1', '\x5', 't', ';', '\x2', '\x2E1', '\x2E2', '\a', '\'', 
		'\x2', '\x2', '\x2E2', '\x2E3', '\x5', '\x6', '\x4', '\x2', '\x2E3', '\x2E5', 
		'\x3', '\x2', '\x2', '\x2', '\x2E4', '\x2E0', '\x3', '\x2', '\x2', '\x2', 
		'\x2E4', '\x2E5', '\x3', '\x2', '\x2', '\x2', '\x2E5', '\x2E7', '\x3', 
		'\x2', '\x2', '\x2', '\x2E6', '\x2E8', '\x5', '`', '\x31', '\x2', '\x2E7', 
		'\x2E6', '\x3', '\x2', '\x2', '\x2', '\x2E7', '\x2E8', '\x3', '\x2', '\x2', 
		'\x2', '\x2E8', '\x2E9', '\x3', '\x2', '\x2', '\x2', '\x2E9', '\x2EA', 
		'\a', '\x31', '\x2', '\x2', '\x2EA', '\x2EB', '\x5', '>', ' ', '\x2', 
		'\x2EB', '\x2ED', '\x3', '\x2', '\x2', '\x2', '\x2EC', '\x2DD', '\x3', 
		'\x2', '\x2', '\x2', '\x2EC', '\x2DE', '\x3', '\x2', '\x2', '\x2', '\x2ED', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x2EE', '\x2EF', '\a', ' ', '\x2', '\x2', 
		'\x2EF', '\x2F4', '\x5', 'n', '\x38', '\x2', '\x2F0', '\x2F1', '\a', ',', 
		'\x2', '\x2', '\x2F1', '\x2F3', '\x5', 'n', '\x38', '\x2', '\x2F2', '\x2F0', 
		'\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2F6', '\x3', '\x2', '\x2', '\x2', 
		'\x2F4', '\x2F2', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2F5', '\x3', 
		'\x2', '\x2', '\x2', '\x2F5', '\x2F8', '\x3', '\x2', '\x2', '\x2', '\x2F6', 
		'\x2F4', '\x3', '\x2', '\x2', '\x2', '\x2F7', '\x2F9', '\a', ',', '\x2', 
		'\x2', '\x2F8', '\x2F7', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2F9', 
		'\x3', '\x2', '\x2', '\x2', '\x2F9', '\x2FA', '\x3', '\x2', '\x2', '\x2', 
		'\x2FA', '\x2FB', '\a', '!', '\x2', '\x2', '\x2FB', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x2FC', '\x301', '\x5', '\x64', '\x33', '\x2', '\x2FD', 
		'\x2FE', '\a', ',', '\x2', '\x2', '\x2FE', '\x300', '\x5', '\x64', '\x33', 
		'\x2', '\x2FF', '\x2FD', '\x3', '\x2', '\x2', '\x2', '\x300', '\x303', 
		'\x3', '\x2', '\x2', '\x2', '\x301', '\x2FF', '\x3', '\x2', '\x2', '\x2', 
		'\x301', '\x302', '\x3', '\x2', '\x2', '\x2', '\x302', '\x305', '\x3', 
		'\x2', '\x2', '\x2', '\x303', '\x301', '\x3', '\x2', '\x2', '\x2', '\x304', 
		'\x306', '\a', ',', '\x2', '\x2', '\x305', '\x304', '\x3', '\x2', '\x2', 
		'\x2', '\x305', '\x306', '\x3', '\x2', '\x2', '\x2', '\x306', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x307', '\x309', '\x5', '\x66', '\x34', '\x2', 
		'\x308', '\x307', '\x3', '\x2', '\x2', '\x2', '\x308', '\x309', '\x3', 
		'\x2', '\x2', '\x2', '\x309', '\x30A', '\x3', '\x2', '\x2', '\x2', '\x30A', 
		'\x30B', '\x5', '>', ' ', '\x2', '\x30B', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x30C', '\x30D', '\x5', 'n', '\x38', '\x2', '\x30D', '\x30E', 
		'\a', '&', '\x2', '\x2', '\x30E', 'g', '\x3', '\x2', '\x2', '\x2', '\x30F', 
		'\x310', '\x5', 'r', ':', '\x2', '\x310', '\x314', '\a', '$', '\x2', '\x2', 
		'\x311', '\x313', '\x5', 'j', '\x36', '\x2', '\x312', '\x311', '\x3', 
		'\x2', '\x2', '\x2', '\x313', '\x316', '\x3', '\x2', '\x2', '\x2', '\x314', 
		'\x312', '\x3', '\x2', '\x2', '\x2', '\x314', '\x315', '\x3', '\x2', '\x2', 
		'\x2', '\x315', '\x317', '\x3', '\x2', '\x2', '\x2', '\x316', '\x314', 
		'\x3', '\x2', '\x2', '\x2', '\x317', '\x318', '\a', '%', '\x2', '\x2', 
		'\x318', 'i', '\x3', '\x2', '\x2', '\x2', '\x319', '\x31A', '\x5', '\x66', 
		'\x34', '\x2', '\x31A', '\x31B', '\x5', '>', ' ', '\x2', '\x31B', '\x31C', 
		'\a', ',', '\x2', '\x2', '\x31C', '\x321', '\x3', '\x2', '\x2', '\x2', 
		'\x31D', '\x31E', '\x5', 'n', '\x38', '\x2', '\x31E', '\x31F', '\a', ',', 
		'\x2', '\x2', '\x31F', '\x321', '\x3', '\x2', '\x2', '\x2', '\x320', '\x319', 
		'\x3', '\x2', '\x2', '\x2', '\x320', '\x31D', '\x3', '\x2', '\x2', '\x2', 
		'\x321', 'k', '\x3', '\x2', '\x2', '\x2', '\x322', '\x324', '\a', '\x13', 
		'\x2', '\x2', '\x323', '\x325', '\a', '\v', '\x2', '\x2', '\x324', '\x323', 
		'\x3', '\x2', '\x2', '\x2', '\x324', '\x325', '\x3', '\x2', '\x2', '\x2', 
		'\x325', '\x326', '\x3', '\x2', '\x2', '\x2', '\x326', '\x329', '\x5', 
		'n', '\x38', '\x2', '\x327', '\x328', '\a', '&', '\x2', '\x2', '\x328', 
		'\x32A', '\x5', 'p', '\x39', '\x2', '\x329', '\x327', '\x3', '\x2', '\x2', 
		'\x2', '\x329', '\x32A', '\x3', '\x2', '\x2', '\x2', '\x32A', '\x32D', 
		'\x3', '\x2', '\x2', '\x2', '\x32B', '\x32C', '\a', '\x31', '\x2', '\x2', 
		'\x32C', '\x32E', '\x5', '>', ' ', '\x2', '\x32D', '\x32B', '\x3', '\x2', 
		'\x2', '\x2', '\x32D', '\x32E', '\x3', '\x2', '\x2', '\x2', '\x32E', '\x32F', 
		'\x3', '\x2', '\x2', '\x2', '\x32F', '\x330', '\a', '(', '\x2', '\x2', 
		'\x330', 'm', '\x3', '\x2', '\x2', '\x2', '\x331', '\x332', '\a', '\x41', 
		'\x2', '\x2', '\x332', 'o', '\x3', '\x2', '\x2', '\x2', '\x333', '\x334', 
		'\x5', 'v', '<', '\x2', '\x334', '\x335', '\x5', 'p', '\x39', '\x2', '\x335', 
		'\x341', '\x3', '\x2', '\x2', '\x2', '\x336', '\x341', '\x5', 'r', ':', 
		'\x2', '\x337', '\x338', '\a', '\"', '\x2', '\x2', '\x338', '\x339', '\x5', 
		'p', '\x39', '\x2', '\x339', '\x33A', '\a', '\x38', '\x2', '\x2', '\x33A', 
		'\x33B', '\x5', 'r', ':', '\x2', '\x33B', '\x33C', '\a', '#', '\x2', '\x2', 
		'\x33C', '\x33D', '\a', '\'', '\x2', '\x2', '\x33D', '\x33E', '\x5', 'n', 
		'\x38', '\x2', '\x33E', '\x341', '\x3', '\x2', '\x2', '\x2', '\x33F', 
		'\x341', '\a', '\x1B', '\x2', '\x2', '\x340', '\x333', '\x3', '\x2', '\x2', 
		'\x2', '\x340', '\x336', '\x3', '\x2', '\x2', '\x2', '\x340', '\x337', 
		'\x3', '\x2', '\x2', '\x2', '\x340', '\x33F', '\x3', '\x2', '\x2', '\x2', 
		'\x341', 'q', '\x3', '\x2', '\x2', '\x2', '\x342', '\x344', '\x5', '\x6', 
		'\x4', '\x2', '\x343', '\x345', '\x5', 't', ';', '\x2', '\x344', '\x343', 
		'\x3', '\x2', '\x2', '\x2', '\x344', '\x345', '\x3', '\x2', '\x2', '\x2', 
		'\x345', 's', '\x3', '\x2', '\x2', '\x2', '\x346', '\x347', '\a', '\"', 
		'\x2', '\x2', '\x347', '\x34C', '\x5', 'p', '\x39', '\x2', '\x348', '\x349', 
		'\a', ',', '\x2', '\x2', '\x349', '\x34B', '\x5', 'p', '\x39', '\x2', 
		'\x34A', '\x348', '\x3', '\x2', '\x2', '\x2', '\x34B', '\x34E', '\x3', 
		'\x2', '\x2', '\x2', '\x34C', '\x34A', '\x3', '\x2', '\x2', '\x2', '\x34C', 
		'\x34D', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x34F', '\x3', '\x2', '\x2', 
		'\x2', '\x34E', '\x34C', '\x3', '\x2', '\x2', '\x2', '\x34F', '\x350', 
		'\a', '#', '\x2', '\x2', '\x350', 'u', '\x3', '\x2', '\x2', '\x2', '\x351', 
		'\x35D', '\t', '\x2', '\x2', '\x2', '\x352', '\x353', '\a', '\x19', '\x2', 
		'\x2', '\x353', '\x35D', '\t', '\x2', '\x2', '\x2', '\x354', '\x356', 
		'\a', '*', '\x2', '\x2', '\x355', '\x357', '\a', '\v', '\x2', '\x2', '\x356', 
		'\x355', '\x3', '\x2', '\x2', '\x2', '\x356', '\x357', '\x3', '\x2', '\x2', 
		'\x2', '\x357', '\x35D', '\x3', '\x2', '\x2', '\x2', '\x358', '\x35A', 
		'\a', '\x34', '\x2', '\x2', '\x359', '\x35B', '\a', '\v', '\x2', '\x2', 
		'\x35A', '\x359', '\x3', '\x2', '\x2', '\x2', '\x35A', '\x35B', '\x3', 
		'\x2', '\x2', '\x2', '\x35B', '\x35D', '\x3', '\x2', '\x2', '\x2', '\x35C', 
		'\x351', '\x3', '\x2', '\x2', '\x2', '\x35C', '\x352', '\x3', '\x2', '\x2', 
		'\x2', '\x35C', '\x354', '\x3', '\x2', '\x2', '\x2', '\x35C', '\x358', 
		'\x3', '\x2', '\x2', '\x2', '\x35D', 'w', '\x3', '\x2', '\x2', '\x2', 
		'\x35E', '\x361', '\a', '\b', '\x2', '\x2', '\x35F', '\x361', '\a', '\t', 
		'\x2', '\x2', '\x360', '\x35E', '\x3', '\x2', '\x2', '\x2', '\x360', '\x35F', 
		'\x3', '\x2', '\x2', '\x2', '\x361', 'y', '\x3', '\x2', '\x2', '\x2', 
		'\x362', '\x368', '\x5', '|', '?', '\x2', '\x363', '\x368', '\a', '\x42', 
		'\x2', '\x2', '\x364', '\x368', '\a', '\x43', '\x2', '\x2', '\x365', '\x368', 
		'\a', '\x44', '\x2', '\x2', '\x366', '\x368', '\a', '\x46', '\x2', '\x2', 
		'\x367', '\x362', '\x3', '\x2', '\x2', '\x2', '\x367', '\x363', '\x3', 
		'\x2', '\x2', '\x2', '\x367', '\x364', '\x3', '\x2', '\x2', '\x2', '\x367', 
		'\x365', '\x3', '\x2', '\x2', '\x2', '\x367', '\x366', '\x3', '\x2', '\x2', 
		'\x2', '\x368', '{', '\x3', '\x2', '\x2', '\x2', '\x369', '\x36C', '\a', 
		'?', '\x2', '\x2', '\x36A', '\x36C', '\a', '@', '\x2', '\x2', '\x36B', 
		'\x369', '\x3', '\x2', '\x2', '\x2', '\x36B', '\x36A', '\x3', '\x2', '\x2', 
		'\x2', '\x36C', '}', '\x3', '\x2', '\x2', '\x2', '\x36D', '\x36E', '\a', 
		'\"', '\x2', '\x2', '\x36E', '\x36F', '\a', '\"', '\x2', '\x2', '\x36F', 
		'\x370', '\x6', '@', '\x18', '\x3', '\x370', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x371', '\x372', '\a', '#', '\x2', '\x2', '\x372', '\x373', '\a', 
		'#', '\x2', '\x2', '\x373', '\x374', '\x6', '\x41', '\x19', '\x3', '\x374', 
		'\x81', '\x3', '\x2', '\x2', '\x2', 'q', '\x86', '\x8C', '\x98', '\xA2', 
		'\xAC', '\xB2', '\xB7', '\xBC', '\xC2', '\xCD', '\xD3', '\xD6', '\xD9', 
		'\xE1', '\xEB', '\xF6', '\xFB', '\x101', '\x107', '\x10D', '\x114', '\x11B', 
		'\x121', '\x129', '\x12F', '\x132', '\x138', '\x13C', '\x140', '\x144', 
		'\x147', '\x14B', '\x151', '\x15C', '\x166', '\x16A', '\x16F', '\x175', 
		'\x17B', '\x180', '\x187', '\x18A', '\x18F', '\x197', '\x19A', '\x19F', 
		'\x1A8', '\x1AB', '\x1AF', '\x1B5', '\x1BF', '\x1C3', '\x1CD', '\x1D7', 
		'\x1E2', '\x1E6', '\x1EF', '\x1F1', '\x1FB', '\x206', '\x211', '\x21C', 
		'\x227', '\x233', '\x235', '\x247', '\x249', '\x254', '\x262', '\x264', 
		'\x270', '\x272', '\x281', '\x283', '\x28D', '\x294', '\x2A2', '\x2A5', 
		'\x2A9', '\x2B2', '\x2B6', '\x2BC', '\x2C0', '\x2C7', '\x2C9', '\x2CD', 
		'\x2D1', '\x2D9', '\x2DB', '\x2E4', '\x2E7', '\x2EC', '\x2F4', '\x2F8', 
		'\x301', '\x305', '\x308', '\x314', '\x320', '\x324', '\x329', '\x32D', 
		'\x340', '\x344', '\x34C', '\x356', '\x35A', '\x35C', '\x360', '\x367', 
		'\x36B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Oxide.Compiler.Parser
